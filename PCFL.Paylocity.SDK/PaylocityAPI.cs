// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK
{
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// For general questions and support of the API, contact:
    /// webservices@paylocity.com
    /// # Overview
    ///
    /// Paylocity Web Services API is an externally facing RESTful Internet
    /// protocol. The Paylocity API uses HTTP verbs and a RESTful endpoint
    /// structure. OAuth 2.0 is used as the API Authorization framework.
    /// Request and response payloads are formatted as JSON.
    /// Paylocity supports v1 and v2 versions of its API endpoints. v1, while
    /// supported, won't be enhanced with additional functionality. For direct
    /// link to v1 documentation, please click
    /// [here](https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm).
    /// For additional resources regarding v1/v2 differences and conversion
    /// path, please contact webservices@paylocity.com.
    ///
    /// ##### Setup
    ///
    /// Paylocity will provide the secure client credentials and set up the
    /// scope (type of requests and allowed company numbers). You will receive
    /// the unique client id, secret, and Paylocity public key for the data
    /// encryption. The secret will expire in 365 days.
    /// * Paylocity will send you an e-mail 10 days prior to the expiration
    /// date for the current secret. If not renewed, the second e-mail
    /// notification will be sent 5 days prior to secret's expiration. Each
    /// email will contain the code necessary to renew the client secret.
    /// * You can obtain the new secret by calling API endpoint using your
    /// current not yet expired credentials and the code that was sent with the
    /// notification email. For details on API endpoint, please see Client
    /// Credentials section.
    /// * Both the current secret value and the new secret value will be
    /// recognized during the transition period. After the current secret
    /// expires, you must use the new secret.
    /// * If you were unable to renew the secret via API endpoint, you can
    /// still contact Service and they will email you new secret via secure
    /// email.
    ///
    ///
    /// When validating the request, Paylocity API will honor the defaults and
    /// required fields set up for the company default New Hire Template as
    /// defined in Web Pay.
    ///
    ///
    /// # Authorization
    ///
    /// Paylocity Web Services API uses OAuth2.0 Authentication with JSON
    /// Message Format.
    ///
    ///
    /// All requests of the Paylocity Web Services API require a bearer token
    /// which can be obtained by authenticating the client with the Paylocity
    /// Web Services API via OAuth 2.0.
    ///
    ///
    /// The client must request a bearer token from the authorization endpoint:
    ///
    ///
    /// auth-server for production:
    /// https://api.paylocity.com/IdentityServer/connect/token
    ///
    ///
    /// auth-server for testing:
    /// https://apisandbox.paylocity.com/IdentityServer/connect/token
    ///
    /// Paylocity reserves the right to impose rate limits on the number of
    /// calls made to our APIs. Changes to API features/functionality may be
    /// made at anytime with or without prior notice.
    ///
    /// ##### Authorization Header
    ///
    /// The request is expected to be in the form of a basic authentication
    /// request, with the "Authorization" header containing the client-id and
    /// client-secret. This means the standard base-64 encoded user:password,
    /// prefixed with "Basic" as the value for the Authorization header, where
    /// user is the client-id and password is the client-secret.
    ///
    /// ##### Content-Type Header
    ///
    /// The "Content-Type" header is required to be
    /// "application/x-www-form-urlencoded".
    ///
    /// ##### Additional Values
    ///
    /// The request must post the following form encoded values within the
    /// request body:
    ///
    /// grant_type = client_credentials
    /// scope = WebLinkAPI
    ///
    /// ##### Responses
    ///
    /// Success will return HTTP 200 OK with JSON content:
    ///
    /// {
    /// "access_token": "xxx",
    /// "expires_in": 3600,
    /// "token_type": "Bearer"
    /// }
    ///
    /// # Encryption
    ///
    /// Paylocity uses a combination of RSA and AES cryptography. As part of
    /// the setup, each client is issued a public RSA key.
    ///
    /// Paylocity recommends the encryption of the incoming requests as
    /// additional protection of the sensitive data. Clients can opt-out of the
    /// encryption during the initial setup process. Opt-out will allow
    /// Paylocity to process unencrypted requests.
    ///
    /// The Paylocity Public Key has the following properties:
    ///
    /// * 2048 bit key size
    ///
    /// * PKCS1 key format
    ///
    /// * PEM encoding
    ///
    /// ##### Properties
    ///
    /// * key (base 64 encoded): The AES symmetric key encrypted with the
    /// Paylocity Public Key. It is the key used to encrypt the content.
    /// Paylocity will decrypt the AES key using RSA decryption and use it to
    /// decrypt the content.
    ///
    /// * iv (base 64 encoded): The AES IV (Initialization Vector) used when
    /// encrypting the content.
    ///
    /// * content (base 64 encoded): The AES encrypted request. The key and iv
    /// provided in the secureContent request are used by Paylocity for
    /// decryption of the content.
    ///
    /// We suggest using the following for the AES:
    ///
    /// * CBC cipher mode
    ///
    /// * PKCS7 padding
    ///
    /// * 128 bit block size
    ///
    /// * 256 bit key size
    ///
    /// ##### Encryption Flow
    ///
    /// * Generate the unencrypted JSON payload to POST/PUT
    /// * Encrypt this JSON payload using your _own key and IV_ (NOT with the
    /// Paylocity public key)
    /// * RSA encrypt the _key_ you used in step 2 with the Paylocity Public
    /// Key, then, base64 encode the result
    /// * Base64 encode the IV used to encrypt the JSON payload in step 2
    /// * Put together a "securecontent" JSON object:
    ///
    /// {
    /// 'secureContent' : {
    /// 'key' : -- RSA-encrypted &amp; base64 encoded key from step 3,
    /// 'iv' : -- base64 encoded iv from step 4
    /// 'content' -- content encrypted with your own key from step 2, base64
    /// encoded
    /// }
    /// }
    ///
    /// ##### Sample Example
    ///
    /// {
    /// "secureContent": {
    /// "key": "eS3aw6H/qzHMJ00gSi6gQ3xa08DPMazk8BFY96Pd99ODA==",
    /// "iv": "NLyXMGq9svw0XO5aI9BzWw==",
    /// "content": "gAEOiQltO1w+LzGUoIK8FiYbU42hug94EasSl7N+Q1w="
    /// }
    /// }
    ///
    /// ##### Sample C# Code
    ///
    /// using Newtonsoft.Json;
    /// using System;
    /// using System.IO;
    /// using System.Security.Cryptography;
    /// using System.Text;
    ///
    /// public class SecuredContent
    /// {
    /// [JsonProperty("key")]
    /// public string Key { get; set; }
    ///
    /// [JsonProperty("iv")]
    /// public string Iv { get; set; }
    ///
    /// [JsonProperty("content")]
    /// public string Content { get; set; }
    ///
    /// }
    ///
    /// public class EndUserSecureRequestExample
    /// {
    /// public string CreateSecuredRequest(FileInfo paylocityPublicKey, string
    /// unsecuredJsonRequest)
    /// {
    /// string publicKeyXml = File.ReadAllText(paylocityPublicKey.FullName,
    /// Encoding.UTF8);
    ///
    /// SecuredContent secureContent = this.CreateSecuredContent(publicKeyXml,
    /// unsecuredJsonRequest);
    ///
    /// string secureRequest = JsonConvert.SerializeObject(new { secureContent
    /// });
    ///
    /// return secureRequest;
    /// }
    ///
    /// private SecuredContent CreateSecuredContent(string publicKeyXml, string
    /// request)
    /// {
    /// using (AesCryptoServiceProvider aesCsp = new
    /// AesCryptoServiceProvider())
    /// {
    /// aesCsp.Mode = CipherMode.CBC;
    /// aesCsp.Padding = PaddingMode.PKCS7;
    /// aesCsp.BlockSize = 128;
    /// aesCsp.KeySize = 256;
    ///
    /// using (ICryptoTransform crt = aesCsp.CreateEncryptor(aesCsp.Key,
    /// aesCsp.IV))
    /// {
    /// using (MemoryStream outputStream = new MemoryStream())
    /// {
    /// using (CryptoStream encryptStream = new CryptoStream(outputStream, crt,
    /// CryptoStreamMode.Write))
    /// {
    /// byte[] encodedRequest = Encoding.UTF8.GetBytes(request);
    /// encryptStream.Write(encodedRequest, 0, encodedRequest.Length);
    /// encryptStream.FlushFinalBlock();
    /// byte[] encryptedRequest = outputStream.ToArray();
    ///
    /// using (RSACryptoServiceProvider crp = new RSACryptoServiceProvider())
    /// {
    /// crp.FromXmlstring(publicKeyXml);
    /// byte[] encryptedKey = crp.Encrypt(aesCsp.Key, false);
    ///
    /// return new SecuredContent()
    /// {
    /// Key = Convert.ToBase64string(encryptedKey),
    /// Iv = Convert.ToBase64string(aesCsp.IV),
    /// Content = Convert.ToBase64string(encryptedRequest)
    /// };
    /// }
    /// }
    /// }
    /// }
    /// }
    /// }
    /// }
    ///
    /// ## Support
    ///
    /// Questions about using the Paylocity API? Please contact
    /// webservices@paylocity.com.
    ///
    /// # Deductions (v1)
    ///
    /// Deductions API provides endpoints to retrieve, add, update and delete
    /// deductions for a company's employees. For schema details, click &lt;a
    /// href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm"
    /// target="_blank"&gt;here&lt;/a&gt;.
    ///
    /// # OnBoarding (v1)
    ///
    /// Onboarding API sends employee data into Paylocity Onboarding to help
    /// ensure an easy and accurate hiring process for subsequent completion
    /// into Web Pay. For schema details, click &lt;a
    /// href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm"
    /// target="_blank"&gt;here&lt;/a&gt;.
    /// </summary>
    public partial class PaylocityAPI : Microsoft.Rest.ServiceClient<PaylocityAPI>, IPaylocityAPI
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling PaylocityAPI.Dispose(). False: will not dispose provided httpClient</param>
        protected PaylocityAPI(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PaylocityAPI(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected PaylocityAPI(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected PaylocityAPI(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected PaylocityAPI(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PaylocityAPI(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling PaylocityAPI.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PaylocityAPI(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PaylocityAPI(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PaylocityAPI(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the PaylocityAPI class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public PaylocityAPI(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.BaseUri = new System.Uri("https://api.paylocity.com/api");
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new  System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
        /// <summary>
        /// Obtain new client secret.
        /// </summary>
        /// <remarks>
        /// Obtain new client secret for Paylocity-issued client id. See Setup section
        /// for details.
        /// </remarks>
        /// <param name='json'>
        /// Add Client Secret Model
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>> AddClientSecretMethodWithHttpMessagesAsync(AddClientSecret json, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (json == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "json");
            }
            if (json != null)
            {
                json.Validate();
            }
            // Tracing
            bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
                System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
                tracingParameters.Add("json", json);
                tracingParameters.Add("cancellationToken", cancellationToken);
                Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "AddClientSecretMethod", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v2/credentials/secrets").ToString();
            // Create HTTP transport objects
            var _httpRequest = new System.Net.Http.HttpRequestMessage();
            System.Net.Http.HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new System.Net.Http.HttpMethod("POST");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(json != null)
            {
                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(json, this.SerializationSettings);
                _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 403 && (int)_statusCode != 429 && (int)_statusCode != 500)
            {
                var ex = new Microsoft.Rest.HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Get employee
        /// </summary>
        /// <remarks>
        /// Get Employee API will return employee data currently available in Web Pay.
        /// </remarks>
        /// <param name='companyId'>
        /// Company Id
        /// </param>
        /// <param name='employeeId'>
        /// Employee Id
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetemployeeWithHttpMessagesAsync(string companyId, string employeeId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (companyId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "companyId");
            }
            if (employeeId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "employeeId");
            }
            // Tracing
            bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
                System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "Getemployee", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v2/companies/{companyId}/employees/{employeeId}").ToString();
            _url = _url.Replace("{companyId}", System.Uri.EscapeDataString(companyId));
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(employeeId));
            // Create HTTP transport objects
            var _httpRequest = new System.Net.Http.HttpRequestMessage();
            System.Net.Http.HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new System.Net.Http.HttpMethod("GET");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 401 && (int)_statusCode != 403 && (int)_statusCode != 404 && (int)_statusCode != 429 && (int)_statusCode != 500)
            {
                var ex = new Microsoft.Rest.HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new Microsoft.Rest.HttpOperationResponse<object>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 200)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<Employee>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 404)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

        /// <summary>
        /// Update employee
        /// </summary>
        /// <remarks>
        /// Update Employee API will update existing employee data in WebPay.
        /// </remarks>
        /// <param name='json'>
        /// Employee Model
        /// </param>
        /// <param name='companyId'>
        /// Company Id
        /// </param>
        /// <param name='employeeId'>
        /// Employee Id
        /// </param>
        /// <param name='customHeaders'>
        /// Headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.HttpOperationException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        /// <return>
        /// A response object containing the response body and response headers.
        /// </return>
        public async System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>> UpdateemployeeWithHttpMessagesAsync(Employee json, string companyId, string employeeId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (json == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "json");
            }
            if (companyId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "companyId");
            }
            if (employeeId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "employeeId");
            }
            // Tracing
            bool _shouldTrace = Microsoft.Rest.ServiceClientTracing.IsEnabled;
            string _invocationId = null;
            if (_shouldTrace)
            {
                _invocationId = Microsoft.Rest.ServiceClientTracing.NextInvocationId.ToString();
                System.Collections.Generic.Dictionary<string, object> tracingParameters = new System.Collections.Generic.Dictionary<string, object>();
                tracingParameters.Add("json", json);
                tracingParameters.Add("companyId", companyId);
                tracingParameters.Add("employeeId", employeeId);
                tracingParameters.Add("cancellationToken", cancellationToken);
                Microsoft.Rest.ServiceClientTracing.Enter(_invocationId, this, "Updateemployee", tracingParameters);
            }
            // Construct URL
            var _baseUrl = this.BaseUri.AbsoluteUri;
            var _url = new System.Uri(new System.Uri(_baseUrl + (_baseUrl.EndsWith("/") ? "" : "/")), "v2/companies/{companyId}/employees/{employeeId}").ToString();
            _url = _url.Replace("{companyId}", System.Uri.EscapeDataString(companyId));
            _url = _url.Replace("{employeeId}", System.Uri.EscapeDataString(employeeId));
            // Create HTTP transport objects
            var _httpRequest = new System.Net.Http.HttpRequestMessage();
            System.Net.Http.HttpResponseMessage _httpResponse = null;
            _httpRequest.Method = new System.Net.Http.HttpMethod("PATCH");
            _httpRequest.RequestUri = new System.Uri(_url);
            // Set Headers


            if (customHeaders != null)
            {
                foreach(var _header in customHeaders)
                {
                    if (_httpRequest.Headers.Contains(_header.Key))
                    {
                        _httpRequest.Headers.Remove(_header.Key);
                    }
                    _httpRequest.Headers.TryAddWithoutValidation(_header.Key, _header.Value);
                }
            }

            // Serialize Request
            string _requestContent = null;
            if(json != null)
            {
                _requestContent = Microsoft.Rest.Serialization.SafeJsonConvert.SerializeObject(json, this.SerializationSettings);
                _httpRequest.Content = new System.Net.Http.StringContent(_requestContent, System.Text.Encoding.UTF8);
                _httpRequest.Content.Headers.ContentType =System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
            }
            // Set Credentials
            if (this.Credentials != null)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            }
            // Send Request
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.SendRequest(_invocationId, _httpRequest);
            }
            cancellationToken.ThrowIfCancellationRequested();
            _httpResponse = await this.HttpClient.SendAsync(_httpRequest, cancellationToken).ConfigureAwait(false);
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.ReceiveResponse(_invocationId, _httpResponse);
            }
            System.Net.HttpStatusCode _statusCode = _httpResponse.StatusCode;
            cancellationToken.ThrowIfCancellationRequested();
            string _responseContent = null;
            if ((int)_statusCode != 200 && (int)_statusCode != 400 && (int)_statusCode != 401 && (int)_statusCode != 403 && (int)_statusCode != 429 && (int)_statusCode != 500)
            {
                var ex = new Microsoft.Rest.HttpOperationException(string.Format("Operation returned an invalid status code '{0}'", _statusCode));
                if (_httpResponse.Content != null) {
                    _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                }
                else {
                    _responseContent = string.Empty;
                }
                ex.Request = new Microsoft.Rest.HttpRequestMessageWrapper(_httpRequest, _requestContent);
                ex.Response = new Microsoft.Rest.HttpResponseMessageWrapper(_httpResponse, _responseContent);
                if (_shouldTrace)
                {
                    Microsoft.Rest.ServiceClientTracing.Error(_invocationId, ex);
                }
                _httpRequest.Dispose();
                if (_httpResponse != null)
                {
                    _httpResponse.Dispose();
                }
                throw ex;
            }
            // Create Result
            var _result = new Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>();
            _result.Request = _httpRequest;
            _result.Response = _httpResponse;
            // Deserialize Response
            if ((int)_statusCode == 400)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            // Deserialize Response
            if ((int)_statusCode == 500)
            {
                _responseContent = await _httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    _result.Body = Microsoft.Rest.Serialization.SafeJsonConvert.DeserializeObject<System.Collections.Generic.IList<Error>>(_responseContent, this.DeserializationSettings);
                }
                catch (Newtonsoft.Json.JsonException ex)
                {
                    _httpRequest.Dispose();
                    if (_httpResponse != null)
                    {
                        _httpResponse.Dispose();
                    }
                    throw new Microsoft.Rest.SerializationException("Unable to deserialize the response.", _responseContent, ex);
                }
            }
            if (_shouldTrace)
            {
                Microsoft.Rest.ServiceClientTracing.Exit(_invocationId, _result);
            }
            return _result;
        }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK
{
    using Models;

    /// <summary>
    /// For general questions and support of the API, contact:
    /// webservices@paylocity.com
    /// # Overview
    ///
    /// Paylocity Web Services API is an externally facing RESTful Internet
    /// protocol. The Paylocity API uses HTTP verbs and a RESTful endpoint
    /// structure. OAuth 2.0 is used as the API Authorization framework.
    /// Request and response payloads are formatted as JSON.
    /// Paylocity supports v1 and v2 versions of its API endpoints. v1, while
    /// supported, won't be enhanced with additional functionality. For direct
    /// link to v1 documentation, please click
    /// [here](https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm).
    /// For additional resources regarding v1/v2 differences and conversion
    /// path, please contact webservices@paylocity.com.
    ///
    /// ##### Setup
    ///
    /// Paylocity will provide the secure client credentials and set up the
    /// scope (type of requests and allowed company numbers). You will receive
    /// the unique client id, secret, and Paylocity public key for the data
    /// encryption. The secret will expire in 365 days.
    /// * Paylocity will send you an e-mail 10 days prior to the expiration
    /// date for the current secret. If not renewed, the second e-mail
    /// notification will be sent 5 days prior to secret's expiration. Each
    /// email will contain the code necessary to renew the client secret.
    /// * You can obtain the new secret by calling API endpoint using your
    /// current not yet expired credentials and the code that was sent with the
    /// notification email. For details on API endpoint, please see Client
    /// Credentials section.
    /// * Both the current secret value and the new secret value will be
    /// recognized during the transition period. After the current secret
    /// expires, you must use the new secret.
    /// * If you were unable to renew the secret via API endpoint, you can
    /// still contact Service and they will email you new secret via secure
    /// email.
    ///
    ///
    /// When validating the request, Paylocity API will honor the defaults and
    /// required fields set up for the company default New Hire Template as
    /// defined in Web Pay.
    ///
    ///
    /// # Authorization
    ///
    /// Paylocity Web Services API uses OAuth2.0 Authentication with JSON
    /// Message Format.
    ///
    ///
    /// All requests of the Paylocity Web Services API require a bearer token
    /// which can be obtained by authenticating the client with the Paylocity
    /// Web Services API via OAuth 2.0.
    ///
    ///
    /// The client must request a bearer token from the authorization endpoint:
    ///
    ///
    /// auth-server for production:
    /// https://api.paylocity.com/IdentityServer/connect/token
    ///
    ///
    /// auth-server for testing:
    /// https://apisandbox.paylocity.com/IdentityServer/connect/token
    ///
    /// Paylocity reserves the right to impose rate limits on the number of
    /// calls made to our APIs. Changes to API features/functionality may be
    /// made at anytime with or without prior notice.
    ///
    /// ##### Authorization Header
    ///
    /// The request is expected to be in the form of a basic authentication
    /// request, with the "Authorization" header containing the client-id and
    /// client-secret. This means the standard base-64 encoded user:password,
    /// prefixed with "Basic" as the value for the Authorization header, where
    /// user is the client-id and password is the client-secret.
    ///
    /// ##### Content-Type Header
    ///
    /// The "Content-Type" header is required to be
    /// "application/x-www-form-urlencoded".
    ///
    /// ##### Additional Values
    ///
    /// The request must post the following form encoded values within the
    /// request body:
    ///
    /// grant_type = client_credentials
    /// scope = WebLinkAPI
    ///
    /// ##### Responses
    ///
    /// Success will return HTTP 200 OK with JSON content:
    ///
    /// {
    /// "access_token": "xxx",
    /// "expires_in": 3600,
    /// "token_type": "Bearer"
    /// }
    ///
    /// # Encryption
    ///
    /// Paylocity uses a combination of RSA and AES cryptography. As part of
    /// the setup, each client is issued a public RSA key.
    ///
    /// Paylocity recommends the encryption of the incoming requests as
    /// additional protection of the sensitive data. Clients can opt-out of the
    /// encryption during the initial setup process. Opt-out will allow
    /// Paylocity to process unencrypted requests.
    ///
    /// The Paylocity Public Key has the following properties:
    ///
    /// * 2048 bit key size
    ///
    /// * PKCS1 key format
    ///
    /// * PEM encoding
    ///
    /// ##### Properties
    ///
    /// * key (base 64 encoded): The AES symmetric key encrypted with the
    /// Paylocity Public Key. It is the key used to encrypt the content.
    /// Paylocity will decrypt the AES key using RSA decryption and use it to
    /// decrypt the content.
    ///
    /// * iv (base 64 encoded): The AES IV (Initialization Vector) used when
    /// encrypting the content.
    ///
    /// * content (base 64 encoded): The AES encrypted request. The key and iv
    /// provided in the secureContent request are used by Paylocity for
    /// decryption of the content.
    ///
    /// We suggest using the following for the AES:
    ///
    /// * CBC cipher mode
    ///
    /// * PKCS7 padding
    ///
    /// * 128 bit block size
    ///
    /// * 256 bit key size
    ///
    /// ##### Encryption Flow
    ///
    /// * Generate the unencrypted JSON payload to POST/PUT
    /// * Encrypt this JSON payload using your _own key and IV_ (NOT with the
    /// Paylocity public key)
    /// * RSA encrypt the _key_ you used in step 2 with the Paylocity Public
    /// Key, then, base64 encode the result
    /// * Base64 encode the IV used to encrypt the JSON payload in step 2
    /// * Put together a "securecontent" JSON object:
    ///
    /// {
    /// 'secureContent' : {
    /// 'key' : -- RSA-encrypted &amp; base64 encoded key from step 3,
    /// 'iv' : -- base64 encoded iv from step 4
    /// 'content' -- content encrypted with your own key from step 2, base64
    /// encoded
    /// }
    /// }
    ///
    /// ##### Sample Example
    ///
    /// {
    /// "secureContent": {
    /// "key": "eS3aw6H/qzHMJ00gSi6gQ3xa08DPMazk8BFY96Pd99ODA==",
    /// "iv": "NLyXMGq9svw0XO5aI9BzWw==",
    /// "content": "gAEOiQltO1w+LzGUoIK8FiYbU42hug94EasSl7N+Q1w="
    /// }
    /// }
    ///
    /// ##### Sample C# Code
    ///
    /// using Newtonsoft.Json;
    /// using System;
    /// using System.IO;
    /// using System.Security.Cryptography;
    /// using System.Text;
    ///
    /// public class SecuredContent
    /// {
    /// [JsonProperty("key")]
    /// public string Key { get; set; }
    ///
    /// [JsonProperty("iv")]
    /// public string Iv { get; set; }
    ///
    /// [JsonProperty("content")]
    /// public string Content { get; set; }
    ///
    /// }
    ///
    /// public class EndUserSecureRequestExample
    /// {
    /// public string CreateSecuredRequest(FileInfo paylocityPublicKey, string
    /// unsecuredJsonRequest)
    /// {
    /// string publicKeyXml = File.ReadAllText(paylocityPublicKey.FullName,
    /// Encoding.UTF8);
    ///
    /// SecuredContent secureContent = this.CreateSecuredContent(publicKeyXml,
    /// unsecuredJsonRequest);
    ///
    /// string secureRequest = JsonConvert.SerializeObject(new { secureContent
    /// });
    ///
    /// return secureRequest;
    /// }
    ///
    /// private SecuredContent CreateSecuredContent(string publicKeyXml, string
    /// request)
    /// {
    /// using (AesCryptoServiceProvider aesCsp = new
    /// AesCryptoServiceProvider())
    /// {
    /// aesCsp.Mode = CipherMode.CBC;
    /// aesCsp.Padding = PaddingMode.PKCS7;
    /// aesCsp.BlockSize = 128;
    /// aesCsp.KeySize = 256;
    ///
    /// using (ICryptoTransform crt = aesCsp.CreateEncryptor(aesCsp.Key,
    /// aesCsp.IV))
    /// {
    /// using (MemoryStream outputStream = new MemoryStream())
    /// {
    /// using (CryptoStream encryptStream = new CryptoStream(outputStream, crt,
    /// CryptoStreamMode.Write))
    /// {
    /// byte[] encodedRequest = Encoding.UTF8.GetBytes(request);
    /// encryptStream.Write(encodedRequest, 0, encodedRequest.Length);
    /// encryptStream.FlushFinalBlock();
    /// byte[] encryptedRequest = outputStream.ToArray();
    ///
    /// using (RSACryptoServiceProvider crp = new RSACryptoServiceProvider())
    /// {
    /// crp.FromXmlstring(publicKeyXml);
    /// byte[] encryptedKey = crp.Encrypt(aesCsp.Key, false);
    ///
    /// return new SecuredContent()
    /// {
    /// Key = Convert.ToBase64string(encryptedKey),
    /// Iv = Convert.ToBase64string(aesCsp.IV),
    /// Content = Convert.ToBase64string(encryptedRequest)
    /// };
    /// }
    /// }
    /// }
    /// }
    /// }
    /// }
    /// }
    ///
    /// ## Support
    ///
    /// Questions about using the Paylocity API? Please contact
    /// webservices@paylocity.com.
    ///
    /// # Deductions (v1)
    ///
    /// Deductions API provides endpoints to retrieve, add, update and delete
    /// deductions for a company's employees. For schema details, click &lt;a
    /// href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm"
    /// target="_blank"&gt;here&lt;/a&gt;.
    ///
    /// # OnBoarding (v1)
    ///
    /// Onboarding API sends employee data into Paylocity Onboarding to help
    /// ensure an easy and accurate hiring process for subsequent completion
    /// into Web Pay. For schema details, click &lt;a
    /// href="https://docs.paylocity.com/weblink/guides/Paylocity_Web_Services_API/v1/Paylocity_Web_Services_API.htm"
    /// target="_blank"&gt;here&lt;/a&gt;.
    /// </summary>
    public partial interface IPaylocityAPI : System.IDisposable
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; }

        /// <summary>
        /// Subscription credentials which uniquely identify client
        /// subscription.
        /// </summary>
        Microsoft.Rest.ServiceClientCredentials Credentials { get; }


        /// <summary>
        /// Obtain new client secret.
        /// </summary>
        /// <remarks>
        /// Obtain new client secret for Paylocity-issued client id. See Setup
        /// section for details.
        /// </remarks>
        /// <param name='json'>
        /// Add Client Secret Model
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>> AddClientSecretMethodWithHttpMessagesAsync(AddClientSecret json, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get employee
        /// </summary>
        /// <remarks>
        /// Get Employee API will return employee data currently available in
        /// Web Pay.
        /// </remarks>
        /// <param name='companyId'>
        /// Company Id
        /// </param>
        /// <param name='employeeId'>
        /// Employee Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<object>> GetemployeeWithHttpMessagesAsync(string companyId, string employeeId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update employee
        /// </summary>
        /// <remarks>
        /// Update Employee API will update existing employee data in WebPay.
        /// </remarks>
        /// <param name='json'>
        /// Employee Model
        /// </param>
        /// <param name='companyId'>
        /// Company Id
        /// </param>
        /// <param name='employeeId'>
        /// Employee Id
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        System.Threading.Tasks.Task<Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<Error>>> UpdateemployeeWithHttpMessagesAsync(Employee json, string companyId, string employeeId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK
{
    using Models;

    /// <summary>
    /// Extension methods for PaylocityAPI.
    /// </summary>
    public static partial class PaylocityAPIExtensions
    {
            /// <summary>
            /// Obtain new client secret.
            /// </summary>
            /// <remarks>
            /// Obtain new client secret for Paylocity-issued client id. See Setup section
            /// for details.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='json'>
            /// Add Client Secret Model
            /// </param>
            public static System.Collections.Generic.IList<Error> AddClientSecretMethod(this IPaylocityAPI operations, AddClientSecret json)
            {
                return ((IPaylocityAPI)operations).AddClientSecretMethodAsync(json).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtain new client secret.
            /// </summary>
            /// <remarks>
            /// Obtain new client secret for Paylocity-issued client id. See Setup section
            /// for details.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='json'>
            /// Add Client Secret Model
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Error>> AddClientSecretMethodAsync(this IPaylocityAPI operations, AddClientSecret json, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddClientSecretMethodWithHttpMessagesAsync(json, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get employee
            /// </summary>
            /// <remarks>
            /// Get Employee API will return employee data currently available in Web Pay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// Company Id
            /// </param>
            /// <param name='employeeId'>
            /// Employee Id
            /// </param>
            public static object Getemployee(this IPaylocityAPI operations, string companyId, string employeeId)
            {
                return ((IPaylocityAPI)operations).GetemployeeAsync(companyId, employeeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get employee
            /// </summary>
            /// <remarks>
            /// Get Employee API will return employee data currently available in Web Pay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// Company Id
            /// </param>
            /// <param name='employeeId'>
            /// Employee Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> GetemployeeAsync(this IPaylocityAPI operations, string companyId, string employeeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetemployeeWithHttpMessagesAsync(companyId, employeeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update employee
            /// </summary>
            /// <remarks>
            /// Update Employee API will update existing employee data in WebPay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='json'>
            /// Employee Model
            /// </param>
            /// <param name='companyId'>
            /// Company Id
            /// </param>
            /// <param name='employeeId'>
            /// Employee Id
            /// </param>
            public static System.Collections.Generic.IList<Error> Updateemployee(this IPaylocityAPI operations, Employee json, string companyId, string employeeId)
            {
                return ((IPaylocityAPI)operations).UpdateemployeeAsync(json, companyId, employeeId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update employee
            /// </summary>
            /// <remarks>
            /// Update Employee API will update existing employee data in WebPay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='json'>
            /// Employee Model
            /// </param>
            /// <param name='companyId'>
            /// Company Id
            /// </param>
            /// <param name='employeeId'>
            /// Employee Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<Error>> UpdateemployeeAsync(this IPaylocityAPI operations, Employee json, string companyId, string employeeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateemployeeWithHttpMessagesAsync(json, companyId, employeeId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The error option model
    /// </summary>
    public partial class ErrorOptionsItem
    {
        /// <summary>
        /// Initializes a new instance of the ErrorOptionsItem class.
        /// </summary>
        public ErrorOptionsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ErrorOptionsItem class.
        /// </summary>
        /// <param name="code">The code associated with this option.</param>
        /// <param name="description">The description of the option.</param>
        public ErrorOptionsItem(string code = default(string), string description = default(string))
        {
            this.Code = code;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the code associated with this option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets the description of the option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The error model
    /// </summary>
    public partial class Error
    {
        /// <summary>
        /// Initializes a new instance of the Error class.
        /// </summary>
        public Error()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Error class.
        /// </summary>
        /// <param name="field">The name of the field, or property in the
        /// request message that contains an error.</param>
        /// <param name="message">The error message.</param>
        /// <param name="options">A list of options associated with this error.
        /// These options may indicate valid values for the field, or property
        /// that contains an error.</param>
        /// <param name="path">The JSON path of the field, or property, that
        /// contains an error in the request message.</param>
        public Error(string field = default(string), string message = default(string), System.Collections.Generic.IList<ErrorOptionsItem> options = default(System.Collections.Generic.IList<ErrorOptionsItem>), string path = default(string))
        {
            this.Field = field;
            this.Message = message;
            this.Options = options;
            this.Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the field, or property in the request
        /// message that contains an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "field")]
        public string Field { get; set; }

        /// <summary>
        /// Gets or sets the error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets a list of options associated with this error. These
        /// options may indicate valid values for the field, or property that
        /// contains an error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "options")]
        public System.Collections.Generic.IList<ErrorOptionsItem> Options { get; set; }

        /// <summary>
        /// Gets or sets the JSON path of the field, or property, that contains
        /// an error in the request message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The Add Client Secret Request Model
    /// </summary>
    public partial class AddClientSecret
    {
        /// <summary>
        /// Initializes a new instance of the AddClientSecret class.
        /// </summary>
        public AddClientSecret()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AddClientSecret class.
        /// </summary>
        /// <param name="code">A value sent with the 'ACTION NEEDED: Web Link
        /// API Credentials Expiring Soon.' email notification.</param>
        public AddClientSecret(string code)
        {
            this.Code = code;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a value sent with the 'ACTION NEEDED: Web Link API
        /// Credentials Expiring Soon.' email notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Code == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Code");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The additional direct deposit model
    /// </summary>
    public partial class EmployeeAdditionalDirectDepositItem
    {
        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeAdditionalDirectDepositItem class.
        /// </summary>
        public EmployeeAdditionalDirectDepositItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// EmployeeAdditionalDirectDepositItem class.
        /// </summary>
        /// <param name="accountNumber">Account number, entered without special
        /// characters and spaces. &lt;br  /&gt;Max length: 17&lt;br
        /// /&gt;</param>
        /// <param name="accountType">Account type. Valid values are *C*
        /// (Checking), *S* (Saving), *P* (Pay Card). &lt;br   /&gt;Max length:
        /// 1&lt;br /&gt;</param>
        /// <param name="amount">Amount value to be deposited to the
        /// account.&lt;br  /&gt;Decimal (12,2)&lt;br /&gt;</param>
        /// <param name="amountType">Amount type to indicate the context of the
        /// amount. Common values are *F* (FLAT), *F-* (Net Minus), *P*
        /// (Percent). &lt;br  /&gt; Max length: 5&lt;br /&gt;</param>
        /// <param name="blockSpecial">Indicates if direct deposit should be
        /// blocked when special check types such as Bonus are processed.&lt;br
        /// /&gt;</param>
        /// <param name="isSkipPreNote">Indicates if account will not
        /// pre-note.&lt;br /&gt;</param>
        /// <param name="nameOnAccount">Name on the bank account. Defaults to
        /// employee's name. &lt;br  /&gt;Max length: 30&lt;br /&gt;</param>
        /// <param name="preNoteDate">Date to end the pre-note of the account.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br
        /// /&gt;</param>
        /// <param name="routingNumber">ABA Transit Routing Number, entered
        /// without dashes or spaces. &lt;br  /&gt;Max length: 9&lt;br
        /// /&gt;</param>
        public EmployeeAdditionalDirectDepositItem(string accountNumber = default(string), string accountType = default(string), double? amount = default(double?), string amountType = default(string), bool? blockSpecial = default(bool?), bool? isSkipPreNote = default(bool?), string nameOnAccount = default(string), string preNoteDate = default(string), string routingNumber = default(string))
        {
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.Amount = amount;
            this.AmountType = amountType;
            this.BlockSpecial = blockSpecial;
            this.IsSkipPreNote = isSkipPreNote;
            this.NameOnAccount = nameOnAccount;
            this.PreNoteDate = preNoteDate;
            this.RoutingNumber = routingNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets account number, entered without special characters and
        /// spaces. &amp;lt;br  /&amp;gt;Max length: 17&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets account type. Valid values are *C* (Checking), *S*
        /// (Saving), *P* (Pay Card). &amp;lt;br   /&amp;gt;Max length:
        /// 1&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountType")]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or sets amount value to be deposited to the account.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or sets amount type to indicate the context of the amount.
        /// Common values are *F* (FLAT), *F-* (Net Minus), *P* (Percent).
        /// &amp;lt;br  /&amp;gt; Max length: 5&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amountType")]
        public string AmountType { get; set; }

        /// <summary>
        /// Gets or sets indicates if direct deposit should be blocked when
        /// special check types such as Bonus are processed.&amp;lt;br
        /// /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blockSpecial")]
        public bool? BlockSpecial { get; set; }

        /// <summary>
        /// Gets or sets indicates if account will not pre-note.&amp;lt;br
        /// /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSkipPreNote")]
        public bool? IsSkipPreNote { get; set; }

        /// <summary>
        /// Gets or sets name on the bank account. Defaults to employee's name.
        /// &amp;lt;br  /&amp;gt;Max length: 30&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nameOnAccount")]
        public string NameOnAccount { get; set; }

        /// <summary>
        /// Gets or sets date to end the pre-note of the account. Common
        /// formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preNoteDate")]
        public string PreNoteDate { get; set; }

        /// <summary>
        /// Gets or sets ABA Transit Routing Number, entered without dashes or
        /// spaces. &amp;lt;br  /&amp;gt;Max length: 9&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingNumber")]
        public string RoutingNumber { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The additional pay rate model
    /// </summary>
    public partial class EmployeeAdditionalRateItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeAdditionalRateItem class.
        /// </summary>
        public EmployeeAdditionalRateItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeAdditionalRateItem class.
        /// </summary>
        /// <param name="changeReason">Not required. If populated, must match
        /// one of the system coded values available in the Additional Rates
        /// Change Reason drop down.&lt;br /&gt;</param>
        /// <param name="costCenter1">Not required. Valid values must match one
        /// of the system coded cost centers available in the Additional Rates
        /// Cost Center level 1 drop down. This cell must be in a text
        /// format.&lt;br /&gt;</param>
        /// <param name="costCenter2">Not required. Valid values must match one
        /// of the system coded cost centers available in the Additional Rates
        /// Cost Center level 2 drop down. This cell must be in a text
        /// format.&lt;br /&gt;</param>
        /// <param name="costCenter3">Not required. Valid values must match one
        /// of the system coded cost centers available in the Additional Rates
        /// Cost Center level 3 drop down. This cell must be in a text
        /// format.&lt;br /&gt;</param>
        /// <param name="effectiveDate">Required. Common formats include
        /// *MM-DD-CCYY*, *CCYY-MM-DD*.&lt;br /&gt;</param>
        /// <param name="endCheckDate">Not required. Must match one of the
        /// system coded check dates available in the Additional Rates End
        /// Check Date drop down. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.&lt;br /&gt;</param>
        /// <param name="job">Not required. If populated, must match one of the
        /// system coded values available in the Additional Rates Job drop
        /// down.&lt;br /&gt;</param>
        /// <param name="rate">Required. Enter dollar amount that corresponds
        /// to the Per selection.&lt;br /&gt;</param>
        /// <param name="rateCode">Required. If populated, must match one of
        /// the system coded values available in the Additional Rates Rate Code
        /// drop down.&lt;br /&gt;</param>
        /// <param name="rateNotes">Not required.&lt;br  /&gt;Max length:
        /// 4000&lt;br /&gt;</param>
        /// <param name="ratePer">Required. Valid values are HOUR or
        /// WEEK.&lt;br /&gt;</param>
        /// <param name="shift">Not required. If populated, must match one of
        /// the system coded values available in the Additional Rates Shift
        /// drop down.&lt;br /&gt;</param>
        public EmployeeAdditionalRateItem(string changeReason = default(string), string costCenter1 = default(string), string costCenter2 = default(string), string costCenter3 = default(string), string effectiveDate = default(string), string endCheckDate = default(string), string job = default(string), double? rate = default(double?), string rateCode = default(string), string rateNotes = default(string), string ratePer = default(string), string shift = default(string))
        {
            this.ChangeReason = changeReason;
            this.CostCenter1 = costCenter1;
            this.CostCenter2 = costCenter2;
            this.CostCenter3 = costCenter3;
            this.EffectiveDate = effectiveDate;
            this.EndCheckDate = endCheckDate;
            this.Job = job;
            this.Rate = rate;
            this.RateCode = rateCode;
            this.RateNotes = rateNotes;
            this.RatePer = ratePer;
            this.Shift = shift;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets not required. If populated, must match one of the
        /// system coded values available in the Additional Rates Change Reason
        /// drop down.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changeReason")]
        public string ChangeReason { get; set; }

        /// <summary>
        /// Gets or sets not required. Valid values must match one of the
        /// system coded cost centers available in the Additional Rates Cost
        /// Center level 1 drop down. This cell must be in a text
        /// format.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter1")]
        public string CostCenter1 { get; set; }

        /// <summary>
        /// Gets or sets not required. Valid values must match one of the
        /// system coded cost centers available in the Additional Rates Cost
        /// Center level 2 drop down. This cell must be in a text
        /// format.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter2")]
        public string CostCenter2 { get; set; }

        /// <summary>
        /// Gets or sets not required. Valid values must match one of the
        /// system coded cost centers available in the Additional Rates Cost
        /// Center level 3 drop down. This cell must be in a text
        /// format.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter3")]
        public string CostCenter3 { get; set; }

        /// <summary>
        /// Gets or sets required. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveDate")]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets not required. Must match one of the system coded check
        /// dates available in the Additional Rates End Check Date drop down.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.&amp;lt;br
        /// /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endCheckDate")]
        public string EndCheckDate { get; set; }

        /// <summary>
        /// Gets or sets not required. If populated, must match one of the
        /// system coded values available in the Additional Rates Job drop
        /// down.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "job")]
        public string Job { get; set; }

        /// <summary>
        /// Gets or sets required. Enter dollar amount that corresponds to the
        /// Per selection.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rate")]
        public double? Rate { get; set; }

        /// <summary>
        /// Gets or sets required. If populated, must match one of the system
        /// coded values available in the Additional Rates Rate Code drop
        /// down.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateCode")]
        public string RateCode { get; set; }

        /// <summary>
        /// Gets or sets not required.&amp;lt;br  /&amp;gt;Max length:
        /// 4000&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateNotes")]
        public string RateNotes { get; set; }

        /// <summary>
        /// Gets or sets required. Valid values are HOUR or WEEK.&amp;lt;br
        /// /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ratePer")]
        public string RatePer { get; set; }

        /// <summary>
        /// Gets or sets not required. If populated, must match one of the
        /// system coded values available in the Additional Rates Shift drop
        /// down.&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shift")]
        public string Shift { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update setup values used for employee benefits integration,
    /// insurance plan settings, and ACA reporting.
    /// </summary>
    public partial class EmployeeBenefitSetup
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeBenefitSetup class.
        /// </summary>
        public EmployeeBenefitSetup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeBenefitSetup class.
        /// </summary>
        /// <param name="benefitClass">Benefit Class code. Values are
        /// configured in Web Pay Company &gt; Setup &gt; Benefits &gt;
        /// Classes.&lt;br  /&gt;Max length: 30</param>
        /// <param name="benefitClassEffectiveDate">Date when Benefit Class
        /// takes effect. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="benefitSalary">Salary used to configure
        /// benefits.&lt;br  /&gt;Decimal(12,2)</param>
        /// <param name="benefitSalaryEffectiveDate">Date when Benefit Salary
        /// takes effect. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="doNotApplyAdministrativePeriod">Applicable only for HR
        /// Enhanced clients and Benefit Classes with ACA Employment Type of
        /// Full Time.</param>
        /// <param name="isMeasureAcaEligibility">Only valid for HR Enhanced
        /// clients and Benefit Classes that are ACA Employment Type of Full
        /// Time.</param>
        public EmployeeBenefitSetup(string benefitClass = default(string), string benefitClassEffectiveDate = default(string), double? benefitSalary = default(double?), string benefitSalaryEffectiveDate = default(string), bool? doNotApplyAdministrativePeriod = default(bool?), bool? isMeasureAcaEligibility = default(bool?))
        {
            this.BenefitClass = benefitClass;
            this.BenefitClassEffectiveDate = benefitClassEffectiveDate;
            this.BenefitSalary = benefitSalary;
            this.BenefitSalaryEffectiveDate = benefitSalaryEffectiveDate;
            this.DoNotApplyAdministrativePeriod = doNotApplyAdministrativePeriod;
            this.IsMeasureAcaEligibility = isMeasureAcaEligibility;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets benefit Class code. Values are configured in Web Pay
        /// Company &amp;gt; Setup &amp;gt; Benefits &amp;gt;
        /// Classes.&amp;lt;br  /&amp;gt;Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benefitClass")]
        public string BenefitClass { get; set; }

        /// <summary>
        /// Gets or sets date when Benefit Class takes effect. Common formats
        /// include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benefitClassEffectiveDate")]
        public string BenefitClassEffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets salary used to configure benefits.&amp;lt;br
        /// /&amp;gt;Decimal(12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benefitSalary")]
        public double? BenefitSalary { get; set; }

        /// <summary>
        /// Gets or sets date when Benefit Salary takes effect. Common formats
        /// include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benefitSalaryEffectiveDate")]
        public string BenefitSalaryEffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets applicable only for HR Enhanced clients and Benefit
        /// Classes with ACA Employment Type of Full Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "doNotApplyAdministrativePeriod")]
        public bool? DoNotApplyAdministrativePeriod { get; set; }

        /// <summary>
        /// Gets or sets only valid for HR Enhanced clients and Benefit Classes
        /// that are ACA Employment Type of Full Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isMeasureAcaEligibility")]
        public bool? IsMeasureAcaEligibility { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    public partial class EmployeeCustomBooleanFieldsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeCustomBooleanFieldsItem
        /// class.
        /// </summary>
        public EmployeeCustomBooleanFieldsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeCustomBooleanFieldsItem
        /// class.
        /// </summary>
        /// <param name="label">The custom field label whose value is to be
        /// added/updated. Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.</param>
        /// <param name="value">The custom boolean field value.</param>
        public EmployeeCustomBooleanFieldsItem(string label, bool value)
        {
            this.Label = label;
            this.Value = value;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for EmployeeCustomBooleanFieldsItem class.
        /// </summary>
        static EmployeeCustomBooleanFieldsItem()
        {
            Category = "PayrollAndHR";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the custom field label whose value is to be
        /// added/updated. Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the custom boolean field value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public bool Value { get; set; }

        /// <summary>
        /// The custom field category.  Acceptable value is 'PayrollAndHR'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public static string Category { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    public partial class EmployeeCustomDateFieldsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeCustomDateFieldsItem
        /// class.
        /// </summary>
        public EmployeeCustomDateFieldsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeCustomDateFieldsItem
        /// class.
        /// </summary>
        /// <param name="label">The custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.</param>
        /// <param name="value">The custom date field value.  Common formats
        /// include MM-DD-CCYY, CCYY-MM-DD.</param>
        public EmployeeCustomDateFieldsItem(string label, string value)
        {
            this.Label = label;
            this.Value = value;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for EmployeeCustomDateFieldsItem class.
        /// </summary>
        static EmployeeCustomDateFieldsItem()
        {
            Category = "PayrollAndHR";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the custom date field value.  Common formats include
        /// MM-DD-CCYY, CCYY-MM-DD.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// The custom field category.  Acceptable value is 'PayrollAndHR'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public static string Category { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    public partial class EmployeeCustomDropDownFieldsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeCustomDropDownFieldsItem
        /// class.
        /// </summary>
        public EmployeeCustomDropDownFieldsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeCustomDropDownFieldsItem
        /// class.
        /// </summary>
        /// <param name="label">The custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.</param>
        /// <param name="value">The custom dropdown field value.  Values are
        /// configured in Web Pay Company &gt; Setup &gt; List Values &gt;
        /// Lookup Values &gt; Custom Fields: PayrollAndHR.  Max length:
        /// 10.</param>
        public EmployeeCustomDropDownFieldsItem(string label, string value)
        {
            this.Label = label;
            this.Value = value;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for EmployeeCustomDropDownFieldsItem class.
        /// </summary>
        static EmployeeCustomDropDownFieldsItem()
        {
            Category = "PayrollAndHR";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the custom dropdown field value.  Values are
        /// configured in Web Pay Company &amp;gt; Setup &amp;gt; List Values
        /// &amp;gt; Lookup Values &amp;gt; Custom Fields: PayrollAndHR.  Max
        /// length: 10.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// The custom field category.  Acceptable value is 'PayrollAndHR'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public static string Category { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    public partial class EmployeeCustomNumberFieldsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeCustomNumberFieldsItem
        /// class.
        /// </summary>
        public EmployeeCustomNumberFieldsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeCustomNumberFieldsItem
        /// class.
        /// </summary>
        /// <param name="label">The custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.</param>
        /// <param name="value">The custom number field value.  Decimal
        /// (18,6).</param>
        public EmployeeCustomNumberFieldsItem(string label, double value)
        {
            this.Label = label;
            this.Value = value;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for EmployeeCustomNumberFieldsItem class.
        /// </summary>
        static EmployeeCustomNumberFieldsItem()
        {
            Category = "PayrollAndHR";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the custom number field value.  Decimal (18,6).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public double Value { get; set; }

        /// <summary>
        /// The custom field category.  Acceptable value is 'PayrollAndHR'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public static string Category { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    public partial class EmployeeCustomTextFieldsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeCustomTextFieldsItem
        /// class.
        /// </summary>
        public EmployeeCustomTextFieldsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeCustomTextFieldsItem
        /// class.
        /// </summary>
        /// <param name="label">The custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.</param>
        /// <param name="value">The custom text field value.  Max length:
        /// 255.</param>
        public EmployeeCustomTextFieldsItem(string label, string value)
        {
            this.Label = label;
            this.Value = value;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for EmployeeCustomTextFieldsItem class.
        /// </summary>
        static EmployeeCustomTextFieldsItem()
        {
            Category = "PayrollAndHR";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the custom field label whose value is to be
        /// added/updated.  Must match to the label defined in Web Pay Custom
        /// Fields setup.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "label")]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the custom text field value.  Max length: 255.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value { get; set; }

        /// <summary>
        /// The custom field category.  Acceptable value is 'PayrollAndHR'.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "category")]
        public static string Category { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Label == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Label");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update home department cost center, position, supervisor,
    /// reviewer, employment type, EEO class, pay settings, and union
    /// information.
    /// </summary>
    public partial class EmployeeDepartmentPosition
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeDepartmentPosition class.
        /// </summary>
        public EmployeeDepartmentPosition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeDepartmentPosition class.
        /// </summary>
        /// <param name="changeReason">Employee department/position change
        /// reason. Must match Company setup. &lt;br  /&gt;Max length:
        /// 15</param>
        /// <param name="clockBadgeNumber">Employee clock badge number.
        /// Defaults to employeeId. &lt;br  /&gt;Max length: 10</param>
        /// <param name="costCenter1">Employer defined location, like *branch,
        /// division, department*, etc. Must match Company setup. &lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="costCenter2">Employer defined location, like *branch,
        /// division, department*, etc. Must match Company setup. &lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="costCenter3">Employer defined location, like *branch,
        /// division, department*, etc. Must match Company setup. &lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="effectiveDate">The date the position takes effect.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="employeeType">Employee current employment type. Common
        /// values *RFT (Regular Full Time), RPT (Regular Part Time), SNL
        /// (Seasonal), TFT (Temporary Full Time), TPT (Temporary Part Time)*.
        /// &lt;br  /&gt;Max length: 10</param>
        /// <param name="equalEmploymentOpportunityClass">Values are configured
        /// in Company &gt; Setup &gt; HR &gt; EEO Classes.&lt;br  /&gt; Max
        /// length: 10</param>
        /// <param name="isMinimumWageExempt">Indicates if employee is exempt
        /// from minimum wage.</param>
        /// <param name="isOvertimeExempt">Indicates if employee is exempt from
        /// overtime.</param>
        /// <param name="isSupervisorReviewer">Indicates if employee is a
        /// supervisor or reviewer.</param>
        /// <param name="isUnionDuesCollected">Indicates if union dues are
        /// collected.</param>
        /// <param name="isUnionInitiationCollected">Indicates if initiations
        /// fees are collected.</param>
        /// <param name="jobTitle">Employee current job title. &lt;br  /&gt;Max
        /// length: 50</param>
        /// <param name="payGroup">Employee pay group. Must match Company
        /// setup. &lt;br  /&gt; Max length: 20</param>
        /// <param name="positionCode">Employee position code. Must match
        /// Company setup.&lt;br  /&gt;Max length: 20</param>
        /// <param name="reviewerCompanyNumber">Company number of
        /// reviewer.&lt;br /&gt;Max length: 9</param>
        /// <param name="reviewerEmployeeId">Employee id of the reviewer.&lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="shift">Employee work shift.&lt;br  /&gt;Max length:
        /// 255</param>
        /// <param name="supervisorCompanyNumber">Supervisor's company number.
        /// Defaults to employee company number.&lt;br  /&gt;Max length:
        /// 9</param>
        /// <param name="supervisorEmployeeId">EmployeeId of the supervisor.
        /// &lt;br  /&gt;Max length: 10</param>
        /// <param name="tipped">Indicates if employee receives tips.</param>
        /// <param name="unionAffiliationDate">Employee union affiliation
        /// effective date. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="unionCode">Employee union code. Must match Company
        /// setup. &lt;br  /&gt;Max length: 10</param>
        /// <param name="unionPosition">Employee union position. Must match
        /// Company setup. &lt;br  /&gt;Max length: 30</param>
        /// <param name="workersCompensation">Employee worker compensation
        /// code. Must match Company setup.&lt;br  /&gt; Max length: 10</param>
        public EmployeeDepartmentPosition(string changeReason = default(string), string clockBadgeNumber = default(string), string costCenter1 = default(string), string costCenter2 = default(string), string costCenter3 = default(string), string effectiveDate = default(string), string employeeType = default(string), string equalEmploymentOpportunityClass = default(string), bool? isMinimumWageExempt = default(bool?), bool? isOvertimeExempt = default(bool?), bool? isSupervisorReviewer = default(bool?), bool? isUnionDuesCollected = default(bool?), bool? isUnionInitiationCollected = default(bool?), string jobTitle = default(string), string payGroup = default(string), string positionCode = default(string), string reviewerCompanyNumber = default(string), string reviewerEmployeeId = default(string), string shift = default(string), string supervisorCompanyNumber = default(string), string supervisorEmployeeId = default(string), string tipped = default(string), string unionAffiliationDate = default(string), string unionCode = default(string), string unionPosition = default(string), string workersCompensation = default(string))
        {
            this.ChangeReason = changeReason;
            this.ClockBadgeNumber = clockBadgeNumber;
            this.CostCenter1 = costCenter1;
            this.CostCenter2 = costCenter2;
            this.CostCenter3 = costCenter3;
            this.EffectiveDate = effectiveDate;
            this.EmployeeType = employeeType;
            this.EqualEmploymentOpportunityClass = equalEmploymentOpportunityClass;
            this.IsMinimumWageExempt = isMinimumWageExempt;
            this.IsOvertimeExempt = isOvertimeExempt;
            this.IsSupervisorReviewer = isSupervisorReviewer;
            this.IsUnionDuesCollected = isUnionDuesCollected;
            this.IsUnionInitiationCollected = isUnionInitiationCollected;
            this.JobTitle = jobTitle;
            this.PayGroup = payGroup;
            this.PositionCode = positionCode;
            this.ReviewerCompanyNumber = reviewerCompanyNumber;
            this.ReviewerEmployeeId = reviewerEmployeeId;
            this.Shift = shift;
            this.SupervisorCompanyNumber = supervisorCompanyNumber;
            this.SupervisorEmployeeId = supervisorEmployeeId;
            this.Tipped = tipped;
            this.UnionAffiliationDate = unionAffiliationDate;
            this.UnionCode = unionCode;
            this.UnionPosition = unionPosition;
            this.WorkersCompensation = workersCompensation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets employee department/position change reason. Must match
        /// Company setup. &amp;lt;br  /&amp;gt;Max length: 15
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changeReason")]
        public string ChangeReason { get; set; }

        /// <summary>
        /// Gets or sets employee clock badge number. Defaults to employeeId.
        /// &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clockBadgeNumber")]
        public string ClockBadgeNumber { get; set; }

        /// <summary>
        /// Gets or sets employer defined location, like *branch, division,
        /// department*, etc. Must match Company setup. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter1")]
        public string CostCenter1 { get; set; }

        /// <summary>
        /// Gets or sets employer defined location, like *branch, division,
        /// department*, etc. Must match Company setup. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter2")]
        public string CostCenter2 { get; set; }

        /// <summary>
        /// Gets or sets employer defined location, like *branch, division,
        /// department*, etc. Must match Company setup. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "costCenter3")]
        public string CostCenter3 { get; set; }

        /// <summary>
        /// Gets or sets the date the position takes effect. Common formats
        /// include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveDate")]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets employee current employment type. Common values *RFT
        /// (Regular Full Time), RPT (Regular Part Time), SNL (Seasonal), TFT
        /// (Temporary Full Time), TPT (Temporary Part Time)*. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "employeeType")]
        public string EmployeeType { get; set; }

        /// <summary>
        /// Gets or sets values are configured in Company &amp;gt; Setup
        /// &amp;gt; HR &amp;gt; EEO Classes.&amp;lt;br  /&amp;gt; Max length:
        /// 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "equalEmploymentOpportunityClass")]
        public string EqualEmploymentOpportunityClass { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is exempt from minimum wage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isMinimumWageExempt")]
        public bool? IsMinimumWageExempt { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is exempt from overtime.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isOvertimeExempt")]
        public bool? IsOvertimeExempt { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is a supervisor or reviewer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSupervisorReviewer")]
        public bool? IsSupervisorReviewer { get; set; }

        /// <summary>
        /// Gets or sets indicates if union dues are collected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isUnionDuesCollected")]
        public bool? IsUnionDuesCollected { get; set; }

        /// <summary>
        /// Gets or sets indicates if initiations fees are collected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isUnionInitiationCollected")]
        public bool? IsUnionInitiationCollected { get; set; }

        /// <summary>
        /// Gets or sets employee current job title. &amp;lt;br  /&amp;gt;Max
        /// length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "jobTitle")]
        public string JobTitle { get; set; }

        /// <summary>
        /// Gets or sets employee pay group. Must match Company setup.
        /// &amp;lt;br  /&amp;gt; Max length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "payGroup")]
        public string PayGroup { get; set; }

        /// <summary>
        /// Gets or sets employee position code. Must match Company
        /// setup.&amp;lt;br  /&amp;gt;Max length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "positionCode")]
        public string PositionCode { get; set; }

        /// <summary>
        /// Gets or sets company number of reviewer.&amp;lt;br /&amp;gt;Max
        /// length: 9
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reviewerCompanyNumber")]
        public string ReviewerCompanyNumber { get; set; }

        /// <summary>
        /// Gets or sets employee id of the reviewer.&amp;lt;br /&amp;gt;Max
        /// length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reviewerEmployeeId")]
        public string ReviewerEmployeeId { get; set; }

        /// <summary>
        /// Gets or sets employee work shift.&amp;lt;br  /&amp;gt;Max length:
        /// 255
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shift")]
        public string Shift { get; set; }

        /// <summary>
        /// Gets or sets supervisor's company number. Defaults to employee
        /// company number.&amp;lt;br  /&amp;gt;Max length: 9
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supervisorCompanyNumber")]
        public string SupervisorCompanyNumber { get; set; }

        /// <summary>
        /// Gets or sets employeeId of the supervisor. &amp;lt;br  /&amp;gt;Max
        /// length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supervisorEmployeeId")]
        public string SupervisorEmployeeId { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee receives tips.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tipped")]
        public string Tipped { get; set; }

        /// <summary>
        /// Gets or sets employee union affiliation effective date. Common
        /// formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unionAffiliationDate")]
        public string UnionAffiliationDate { get; set; }

        /// <summary>
        /// Gets or sets employee union code. Must match Company setup.
        /// &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unionCode")]
        public string UnionCode { get; set; }

        /// <summary>
        /// Gets or sets employee union position. Must match Company setup.
        /// &amp;lt;br  /&amp;gt;Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unionPosition")]
        public string UnionPosition { get; set; }

        /// <summary>
        /// Gets or sets employee worker compensation code. Must match Company
        /// setup.&amp;lt;br  /&amp;gt; Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workersCompensation")]
        public string WorkersCompensation { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The emergency contact model
    /// </summary>
    public partial class EmployeeEmergencyContactsItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeEmergencyContactsItem
        /// class.
        /// </summary>
        public EmployeeEmergencyContactsItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeEmergencyContactsItem
        /// class.
        /// </summary>
        /// <param name="firstName">Required. Contact first name. &lt;br
        /// /&gt;Max length: 40</param>
        /// <param name="lastName">Required. Contact last name. &lt;br
        /// /&gt;Max length: 40</param>
        /// <param name="address1">1st address line.</param>
        /// <param name="address2">2nd address line.</param>
        /// <param name="city">City.</param>
        /// <param name="country">County.</param>
        /// <param name="county">Country.  Must be a valid 3 character country
        /// code.  Common values are *USA* (United States), *CAN*
        /// (Canada).</param>
        /// <param name="email">Contact email.  Must be valid email address
        /// format.</param>
        /// <param name="homePhone">Contact Home Phone.  Valid phone format
        /// *(###) #######* or *######-####* or *### ### ####* or *##########*
        /// or, if international, starts with *+#*, only spaces and digits
        /// allowed.</param>
        /// <param name="mobilePhone">Contact Mobile Phone.  Valid phone format
        /// *(###) #######* or *######-####* or *### ### ####* or *##########*
        /// or, if international, starts with *+#*, only spaces and digits
        /// allowed.</param>
        /// <param name="notes">Notes. &lt;br  /&gt;Max length: 1000</param>
        /// <param name="pager">Contact Pager.  Valid phone format  *(###)
        /// #######* or *######-####* or *### ### ####* or *##########* or, if
        /// international, starts with *+#*, only spaces and digits
        /// allowed.</param>
        /// <param name="primaryPhone">Required. Contact primary phone type.
        /// Must match Company setup.  Valid  values are H (Home), M (Mobile),
        /// P (Pager), W (Work)</param>
        /// <param name="priority">Required. Contact priority. Valid values are
        /// *P* (Primary) or *S* (Secondary).</param>
        /// <param name="relationship">Required. Contact relationship.  Must
        /// match Company setup.  Common values are Spouse, Mother,
        /// Father.</param>
        /// <param name="state">State or Province.  If U.S. address, must be
        /// valid 2 character state code.  Common values are *IL* (Illinois),
        /// *CA* (California).</param>
        /// <param name="syncEmployeeInfo">Valid values are *true* or
        /// *false*.</param>
        /// <param name="workExtension">Work Extension.</param>
        /// <param name="workPhone">Contact Work Phone.  Valid phone format
        /// *(###) #######* or *######-####* or *### ### ####* or *##########*
        /// or, if international, starts with *+#*, only spaces and digits
        /// allowed.</param>
        /// <param name="zip">Postal code.  If U.S. address, must be a valid
        /// zip code.</param>
        public EmployeeEmergencyContactsItem(string firstName, string lastName, string address1 = default(string), string address2 = default(string), string city = default(string), string country = default(string), string county = default(string), string email = default(string), string homePhone = default(string), string mobilePhone = default(string), string notes = default(string), string pager = default(string), string primaryPhone = default(string), string priority = default(string), string relationship = default(string), string state = default(string), bool? syncEmployeeInfo = default(bool?), string workExtension = default(string), string workPhone = default(string), string zip = default(string))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Country = country;
            this.County = county;
            this.Email = email;
            this.FirstName = firstName;
            this.HomePhone = homePhone;
            this.LastName = lastName;
            this.MobilePhone = mobilePhone;
            this.Notes = notes;
            this.Pager = pager;
            this.PrimaryPhone = primaryPhone;
            this.Priority = priority;
            this.Relationship = relationship;
            this.State = state;
            this.SyncEmployeeInfo = syncEmployeeInfo;
            this.WorkExtension = workExtension;
            this.WorkPhone = workPhone;
            this.Zip = zip;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets 1st address line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets 2nd address line.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets city.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets county.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets country.  Must be a valid 3 character country code.
        /// Common values are *USA* (United States), *CAN* (Canada).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "county")]
        public string County { get; set; }

        /// <summary>
        /// Gets or sets contact email.  Must be valid email address format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "email")]
        public string Email { get; set; }

        /// <summary>
        /// Gets or sets required. Contact first name. &amp;lt;br  /&amp;gt;Max
        /// length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets contact Home Phone.  Valid phone format  *(###)
        /// #######* or *######-####* or *### ### ####* or *##########* or, if
        /// international, starts with *+#*, only spaces and digits allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "homePhone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// Gets or sets required. Contact last name. &amp;lt;br  /&amp;gt;Max
        /// length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets contact Mobile Phone.  Valid phone format  *(###)
        /// #######* or *######-####* or *### ### ####* or *##########* or, if
        /// international, starts with *+#*, only spaces and digits allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or sets notes. &amp;lt;br  /&amp;gt;Max length: 1000
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notes")]
        public string Notes { get; set; }

        /// <summary>
        /// Gets or sets contact Pager.  Valid phone format  *(###) #######* or
        /// *######-####* or *### ### ####* or *##########* or, if
        /// international, starts with *+#*, only spaces and digits allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pager")]
        public string Pager { get; set; }

        /// <summary>
        /// Gets or sets required. Contact primary phone type.  Must match
        /// Company setup.  Valid  values are H (Home), M (Mobile), P (Pager),
        /// W (Work)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryPhone")]
        public string PrimaryPhone { get; set; }

        /// <summary>
        /// Gets or sets required. Contact priority. Valid values are *P*
        /// (Primary) or *S* (Secondary).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public string Priority { get; set; }

        /// <summary>
        /// Gets or sets required. Contact relationship.  Must match Company
        /// setup.  Common values are Spouse, Mother, Father.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relationship")]
        public string Relationship { get; set; }

        /// <summary>
        /// Gets or sets state or Province.  If U.S. address, must be valid 2
        /// character state code.  Common values are *IL* (Illinois), *CA*
        /// (California).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Gets or sets valid values are *true* or *false*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncEmployeeInfo")]
        public bool? SyncEmployeeInfo { get; set; }

        /// <summary>
        /// Gets or sets work Extension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workExtension")]
        public string WorkExtension { get; set; }

        /// <summary>
        /// Gets or sets contact Work Phone.  Valid phone format  *(###)
        /// #######* or *######-####* or *### ### ####* or *##########* or, if
        /// international, starts with *+#*, only spaces and digits allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workPhone")]
        public string WorkPhone { get; set; }

        /// <summary>
        /// Gets or sets postal code.  If U.S. address, must be a valid zip
        /// code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zip")]
        public string Zip { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FirstName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FirstName");
            }
            if (this.LastName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LastName");
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update federal tax amount type (taxCalculationCode), amount or
    /// percentage, filing status, and exemptions.
    /// </summary>
    public partial class EmployeeFederalTax
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeFederalTax class.
        /// </summary>
        public EmployeeFederalTax()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeFederalTax class.
        /// </summary>
        /// <param name="amount">Tax amount. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="deductionsAmount">Box 4(b) on form W4 (year 2020 or
        /// later): Deductions amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="dependentsAmount">Box 3 on form W4 (year 2020 or
        /// later): Total dependents amount. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="exemptions">Federal tax exemptions value. &lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="filingStatus">Employee federal filing status. Common
        /// values are *S* (Single), *M* (Married).&lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="higherRate">Box 2(c) on form W4 (year 2020 or later):
        /// Multiple Jobs or Spouse Works. &lt;br  /&gt;Boolean</param>
        /// <param name="otherIncomeAmount">Box 4(a) on form W4 (year 2020 or
        /// later): Other income amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="percentage">Tax percentage. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="taxCalculationCode">Tax calculation code. Common
        /// values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount
        /// plus Fixed Percentage). &lt;br  /&gt;Max length: 10</param>
        /// <param name="w4FormYear">The federal W4 form year &lt;br
        /// /&gt;Integer</param>
        public EmployeeFederalTax(double? amount = default(double?), double? deductionsAmount = default(double?), double? dependentsAmount = default(double?), double? exemptions = default(double?), string filingStatus = default(string), bool? higherRate = default(bool?), double? otherIncomeAmount = default(double?), double? percentage = default(double?), string taxCalculationCode = default(string), int? w4FormYear = default(int?))
        {
            this.Amount = amount;
            this.DeductionsAmount = deductionsAmount;
            this.DependentsAmount = dependentsAmount;
            this.Exemptions = exemptions;
            this.FilingStatus = filingStatus;
            this.HigherRate = higherRate;
            this.OtherIncomeAmount = otherIncomeAmount;
            this.Percentage = percentage;
            this.TaxCalculationCode = taxCalculationCode;
            this.W4FormYear = w4FormYear;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets tax amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or sets box 4(b) on form W4 (year 2020 or later): Deductions
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deductionsAmount")]
        public double? DeductionsAmount { get; set; }

        /// <summary>
        /// Gets or sets box 3 on form W4 (year 2020 or later): Total
        /// dependents amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependentsAmount")]
        public double? DependentsAmount { get; set; }

        /// <summary>
        /// Gets or sets federal tax exemptions value. &amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions")]
        public double? Exemptions { get; set; }

        /// <summary>
        /// Gets or sets employee federal filing status. Common values are *S*
        /// (Single), *M* (Married).&amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filingStatus")]
        public string FilingStatus { get; set; }

        /// <summary>
        /// Gets or sets box 2(c) on form W4 (year 2020 or later): Multiple
        /// Jobs or Spouse Works. &amp;lt;br  /&amp;gt;Boolean
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "higherRate")]
        public bool? HigherRate { get; set; }

        /// <summary>
        /// Gets or sets box 4(a) on form W4 (year 2020 or later): Other income
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "otherIncomeAmount")]
        public double? OtherIncomeAmount { get; set; }

        /// <summary>
        /// Gets or sets tax percentage. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentage")]
        public double? Percentage { get; set; }

        /// <summary>
        /// Gets or sets tax calculation code. Common values are *F* (Flat),
        /// *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed
        /// Percentage). &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCalculationCode")]
        public string TaxCalculationCode { get; set; }

        /// <summary>
        /// Gets or sets the federal W4 form year &amp;lt;br  /&amp;gt;Integer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "w4FormYear")]
        public int? W4FormYear { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update employee's home address, personal phone numbers, and
    /// personal email.
    /// </summary>
    public partial class EmployeeHomeAddress
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeHomeAddress class.
        /// </summary>
        public EmployeeHomeAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeHomeAddress class.
        /// </summary>
        /// <param name="address1">1st address line.&lt;br  /&gt; Max length:
        /// 40</param>
        /// <param name="address2">2nd address line. &lt;br  /&gt; Max length:
        /// 40</param>
        /// <param name="city">City.&lt;br  /&gt; Max length: 40</param>
        /// <param name="country">Country.&lt;br  /&gt; Max length: 30</param>
        /// <param name="county">County.&lt;br  /&gt; Max length: 30</param>
        /// <param name="emailAddress">Email. &lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="mobilePhone">Mobile phone number.&lt;br  /&gt; Max
        /// length: 12</param>
        /// <param name="phone">Phone number.&lt;br  /&gt; Max length:
        /// 12</param>
        /// <param name="postalCode">Postal code.&lt;br  /&gt; Max length:
        /// 10</param>
        /// <param name="state">State or province.&lt;br  /&gt; Max length:
        /// 2</param>
        public EmployeeHomeAddress(string address1 = default(string), string address2 = default(string), string city = default(string), string country = default(string), string county = default(string), string emailAddress = default(string), string mobilePhone = default(string), string phone = default(string), string postalCode = default(string), string state = default(string))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Country = country;
            this.County = county;
            this.EmailAddress = emailAddress;
            this.MobilePhone = mobilePhone;
            this.Phone = phone;
            this.PostalCode = postalCode;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets 1st address line.&amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets 2nd address line. &amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets city.&amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets country.&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets county.&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "county")]
        public string County { get; set; }

        /// <summary>
        /// Gets or sets email. &amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets mobile phone number.&amp;lt;br  /&amp;gt; Max length:
        /// 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or sets phone number.&amp;lt;br  /&amp;gt; Max length: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets postal code.&amp;lt;br  /&amp;gt; Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets state or province.&amp;lt;br  /&amp;gt; Max length: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The Local Tax model
    /// </summary>
    public partial class EmployeeLocalTaxItem
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeLocalTaxItem class.
        /// </summary>
        public EmployeeLocalTaxItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeLocalTaxItem class.
        /// </summary>
        /// <param name="exemptions">Local tax exemptions value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="exemptions2">Local tax exemptions 2 value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="filingStatus">Employee local tax filing status. Must
        /// match specific local tax setup. &lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="residentPSD">Resident PSD (political subdivision code)
        /// applicable in PA. Must match Company setup.&lt;br  /&gt; Max
        /// length: 9</param>
        /// <param name="taxCode">Local tax code.&lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="workPSD">Work location PSD. Must match Company setup.
        /// &lt;br  /&gt; Max length: 9</param>
        public EmployeeLocalTaxItem(double? exemptions = default(double?), double? exemptions2 = default(double?), string filingStatus = default(string), string residentPSD = default(string), string taxCode = default(string), string workPSD = default(string))
        {
            this.Exemptions = exemptions;
            this.Exemptions2 = exemptions2;
            this.FilingStatus = filingStatus;
            this.ResidentPSD = residentPSD;
            this.TaxCode = taxCode;
            this.WorkPSD = workPSD;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets local tax exemptions value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions")]
        public double? Exemptions { get; set; }

        /// <summary>
        /// Gets or sets local tax exemptions 2 value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions2")]
        public double? Exemptions2 { get; set; }

        /// <summary>
        /// Gets or sets employee local tax filing status. Must match specific
        /// local tax setup. &amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filingStatus")]
        public string FilingStatus { get; set; }

        /// <summary>
        /// Gets or sets resident PSD (political subdivision code) applicable
        /// in PA. Must match Company setup.&amp;lt;br  /&amp;gt; Max length: 9
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "residentPSD")]
        public string ResidentPSD { get; set; }

        /// <summary>
        /// Gets or sets local tax code.&amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCode")]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or sets work location PSD. Must match Company setup.
        /// &amp;lt;br  /&amp;gt; Max length: 9
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workPSD")]
        public string WorkPSD { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add the main direct deposit account. After deposits are made to any
    /// additional direct deposit accounts, the remaining net check is
    /// deposited in the main direct deposit account. IMPORTANT: A direct
    /// deposit update will remove ALL existing main and additional direct
    /// deposit information in WebPay and replace with what is provided on the
    /// request. GET API will not return direct deposit data.
    /// </summary>
    public partial class EmployeeMainDirectDeposit
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeMainDirectDeposit class.
        /// </summary>
        public EmployeeMainDirectDeposit()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeMainDirectDeposit class.
        /// </summary>
        /// <param name="accountNumber">Account number, entered without special
        /// characters and spaces. &lt;br  /&gt;Max length: 17</param>
        /// <param name="accountType">Account type. Valid values are *C*
        /// (Checking), *S* (Saving), *P* (Pay Card). &lt;br   /&gt;Max length:
        /// 1</param>
        /// <param name="blockSpecial">Indicates if direct deposit should be
        /// blocked when special check types such as Bonus are processed.&lt;br
        /// /&gt;</param>
        /// <param name="isSkipPreNote">Indicates if account will not
        /// pre-note.</param>
        /// <param name="nameOnAccount">Name on the bank account. Defaults to
        /// employee's name. &lt;br  /&gt;Max length: 30&lt;br /&gt;</param>
        /// <param name="preNoteDate">Date to end the pre-note of the account.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="routingNumber">ABA Transit Routing Number, entered
        /// without dashes or spaces. &lt;br  /&gt;Max length: 9</param>
        public EmployeeMainDirectDeposit(string accountNumber = default(string), string accountType = default(string), bool? blockSpecial = default(bool?), bool? isSkipPreNote = default(bool?), string nameOnAccount = default(string), string preNoteDate = default(string), string routingNumber = default(string))
        {
            this.AccountNumber = accountNumber;
            this.AccountType = accountType;
            this.BlockSpecial = blockSpecial;
            this.IsSkipPreNote = isSkipPreNote;
            this.NameOnAccount = nameOnAccount;
            this.PreNoteDate = preNoteDate;
            this.RoutingNumber = routingNumber;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets account number, entered without special characters and
        /// spaces. &amp;lt;br  /&amp;gt;Max length: 17
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountNumber")]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Gets or sets account type. Valid values are *C* (Checking), *S*
        /// (Saving), *P* (Pay Card). &amp;lt;br   /&amp;gt;Max length: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountType")]
        public string AccountType { get; set; }

        /// <summary>
        /// Gets or sets indicates if direct deposit should be blocked when
        /// special check types such as Bonus are processed.&amp;lt;br
        /// /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blockSpecial")]
        public bool? BlockSpecial { get; set; }

        /// <summary>
        /// Gets or sets indicates if account will not pre-note.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSkipPreNote")]
        public bool? IsSkipPreNote { get; set; }

        /// <summary>
        /// Gets or sets name on the bank account. Defaults to employee's name.
        /// &amp;lt;br  /&amp;gt;Max length: 30&amp;lt;br /&amp;gt;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nameOnAccount")]
        public string NameOnAccount { get; set; }

        /// <summary>
        /// Gets or sets date to end the pre-note of the account. Common
        /// formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preNoteDate")]
        public string PreNoteDate { get; set; }

        /// <summary>
        /// Gets or sets ABA Transit Routing Number, entered without dashes or
        /// spaces. &amp;lt;br  /&amp;gt;Max length: 9
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingNumber")]
        public string RoutingNumber { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update non-primary state tax code, amount type
    /// (taxCalculationCode), amount or percentage, filing status, exemptions,
    /// supplemental check (specialCheckCalc), and reciprocity code
    /// information.
    /// </summary>
    public partial class EmployeeNonPrimaryStateTax
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeNonPrimaryStateTax class.
        /// </summary>
        public EmployeeNonPrimaryStateTax()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeNonPrimaryStateTax class.
        /// </summary>
        /// <param name="amount">State tax code.&lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="deductionsAmount">Box 4(b) on form W4 (year 2020 or
        /// later): Deductions amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="dependentsAmount">Box 3 on form W4 (year 2020 or
        /// later): Total dependents amount. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="exemptions">State tax exemptions value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="exemptions2">State tax exemptions 2 value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="filingStatus">Employee state tax filing status. Common
        /// values are *S* (Single), *M* (Married).&lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="higherRate">Box 2(c) on form W4 (year 2020 or later):
        /// Multiple Jobs or Spouse Works. &lt;br  /&gt;Boolean</param>
        /// <param name="otherIncomeAmount">Box 4(a) on form W4 (year 2020 or
        /// later): Other income amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="percentage">State Tax percentage. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="reciprocityCode">Non-primary state tax reciprocity
        /// code.&lt;br  /&gt; Max length: 50</param>
        /// <param name="specialCheckCalc">Supplemental check calculation code.
        /// Common values are *Blocked* (Taxes blocked on Supplemental checks),
        /// *Supp* (Use supplemental Tax Rate-Code). &lt;br  /&gt;Max length:
        /// 10</param>
        /// <param name="taxCalculationCode">Tax calculation code. Common
        /// values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount
        /// plus Fixed Percentage). &lt;br  /&gt;Max length: 10</param>
        /// <param name="taxCode">State tax code.&lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="w4FormYear">The state W4 form year &lt;br
        /// /&gt;Integer</param>
        public EmployeeNonPrimaryStateTax(double? amount = default(double?), double? deductionsAmount = default(double?), double? dependentsAmount = default(double?), double? exemptions = default(double?), double? exemptions2 = default(double?), string filingStatus = default(string), bool? higherRate = default(bool?), double? otherIncomeAmount = default(double?), double? percentage = default(double?), string reciprocityCode = default(string), string specialCheckCalc = default(string), string taxCalculationCode = default(string), string taxCode = default(string), int? w4FormYear = default(int?))
        {
            this.Amount = amount;
            this.DeductionsAmount = deductionsAmount;
            this.DependentsAmount = dependentsAmount;
            this.Exemptions = exemptions;
            this.Exemptions2 = exemptions2;
            this.FilingStatus = filingStatus;
            this.HigherRate = higherRate;
            this.OtherIncomeAmount = otherIncomeAmount;
            this.Percentage = percentage;
            this.ReciprocityCode = reciprocityCode;
            this.SpecialCheckCalc = specialCheckCalc;
            this.TaxCalculationCode = taxCalculationCode;
            this.TaxCode = taxCode;
            this.W4FormYear = w4FormYear;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets state tax code.&amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or sets box 4(b) on form W4 (year 2020 or later): Deductions
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deductionsAmount")]
        public double? DeductionsAmount { get; set; }

        /// <summary>
        /// Gets or sets box 3 on form W4 (year 2020 or later): Total
        /// dependents amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependentsAmount")]
        public double? DependentsAmount { get; set; }

        /// <summary>
        /// Gets or sets state tax exemptions value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions")]
        public double? Exemptions { get; set; }

        /// <summary>
        /// Gets or sets state tax exemptions 2 value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions2")]
        public double? Exemptions2 { get; set; }

        /// <summary>
        /// Gets or sets employee state tax filing status. Common values are
        /// *S* (Single), *M* (Married).&amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filingStatus")]
        public string FilingStatus { get; set; }

        /// <summary>
        /// Gets or sets box 2(c) on form W4 (year 2020 or later): Multiple
        /// Jobs or Spouse Works. &amp;lt;br  /&amp;gt;Boolean
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "higherRate")]
        public bool? HigherRate { get; set; }

        /// <summary>
        /// Gets or sets box 4(a) on form W4 (year 2020 or later): Other income
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "otherIncomeAmount")]
        public double? OtherIncomeAmount { get; set; }

        /// <summary>
        /// Gets or sets state Tax percentage. &amp;lt;br  /&amp;gt;Decimal
        /// (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentage")]
        public double? Percentage { get; set; }

        /// <summary>
        /// Gets or sets non-primary state tax reciprocity code.&amp;lt;br
        /// /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reciprocityCode")]
        public string ReciprocityCode { get; set; }

        /// <summary>
        /// Gets or sets supplemental check calculation code. Common values are
        /// *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use
        /// supplemental Tax Rate-Code). &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "specialCheckCalc")]
        public string SpecialCheckCalc { get; set; }

        /// <summary>
        /// Gets or sets tax calculation code. Common values are *F* (Flat),
        /// *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed
        /// Percentage). &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCalculationCode")]
        public string TaxCalculationCode { get; set; }

        /// <summary>
        /// Gets or sets state tax code.&amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCode")]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or sets the state W4 form year &amp;lt;br  /&amp;gt;Integer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "w4FormYear")]
        public int? W4FormYear { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update hourly or salary pay rate, effective date, and pay
    /// frequency.
    /// </summary>
    public partial class EmployeePrimaryPayRate
    {
        /// <summary>
        /// Initializes a new instance of the EmployeePrimaryPayRate class.
        /// </summary>
        public EmployeePrimaryPayRate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeePrimaryPayRate class.
        /// </summary>
        /// <param name="annualSalary">Employee annual salary.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="baseRate">Employee base rate, used for Hourly
        /// employees. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="beginCheckDate">The date of the first check on which
        /// the new pay rate will appear. This value is only applicable when
        /// updating an existing employee. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="changeReason">Pay rate change reason.&lt;br  /&gt; Max
        /// length: 30</param>
        /// <param name="defaultHours">Employee default hours consistently
        /// worked. If autoPayType is set to D, employee will be paid hourly
        /// base rate for the defaultHours. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="effectiveDate">The date the employee's pay rate takes
        /// effect. Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="isAutoPay">If set to *True*, employee will be paid
        /// automatically using deafultHours.</param>
        /// <param name="payFrequency">Employee current pay frequency. Common
        /// values are *A (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S
        /// (Semi-Monthly), Q (Quarterly), W (Weekly)*. &lt;br  /&gt;Max
        /// length: 5</param>
        /// <param name="payGrade">Employee pay grade. Must match Company
        /// setup. &lt;br  /&gt; Max length: 10</param>
        /// <param name="payRateNote">Pay rate notes regarding employee.&lt;br
        /// /&gt; Max length: 250</param>
        /// <param name="payType">Employee pay type (rate code). Valid values
        /// are *Hourly* or *Salary*. &lt;br  /&gt;Max length: 10</param>
        /// <param name="ratePer">Employee base rate frequency used with
        /// payType Hourly. Common values are *Hour, Week*. Default is Hour.
        /// &lt;br  /&gt;Max length: 10</param>
        /// <param name="salary">Employee gross salary per pay period used with
        /// payType Salary.&lt;br  /&gt;Decimal (12,2)</param>
        public EmployeePrimaryPayRate(double? annualSalary = default(double?), double? baseRate = default(double?), string beginCheckDate = default(string), string changeReason = default(string), double? defaultHours = default(double?), string effectiveDate = default(string), bool? isAutoPay = default(bool?), string payFrequency = default(string), string payGrade = default(string), string payRateNote = default(string), string payType = default(string), string ratePer = default(string), double? salary = default(double?))
        {
            this.AnnualSalary = annualSalary;
            this.BaseRate = baseRate;
            this.BeginCheckDate = beginCheckDate;
            this.ChangeReason = changeReason;
            this.DefaultHours = defaultHours;
            this.EffectiveDate = effectiveDate;
            this.IsAutoPay = isAutoPay;
            this.PayFrequency = payFrequency;
            this.PayGrade = payGrade;
            this.PayRateNote = payRateNote;
            this.PayType = payType;
            this.RatePer = ratePer;
            this.Salary = salary;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets employee annual salary.&amp;lt;br /&amp;gt;Decimal
        /// (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "annualSalary")]
        public double? AnnualSalary { get; set; }

        /// <summary>
        /// Gets or sets employee base rate, used for Hourly employees.
        /// &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "baseRate")]
        public double? BaseRate { get; set; }

        /// <summary>
        /// Gets or sets the date of the first check on which the new pay rate
        /// will appear. This value is only applicable when updating an
        /// existing employee. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "beginCheckDate")]
        public string BeginCheckDate { get; set; }

        /// <summary>
        /// Gets or sets pay rate change reason.&amp;lt;br  /&amp;gt; Max
        /// length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changeReason")]
        public string ChangeReason { get; set; }

        /// <summary>
        /// Gets or sets employee default hours consistently worked. If
        /// autoPayType is set to D, employee will be paid hourly base rate for
        /// the defaultHours. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultHours")]
        public double? DefaultHours { get; set; }

        /// <summary>
        /// Gets or sets the date the employee's pay rate takes effect. Common
        /// formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveDate")]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets if set to *True*, employee will be paid automatically
        /// using deafultHours.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAutoPay")]
        public bool? IsAutoPay { get; set; }

        /// <summary>
        /// Gets or sets employee current pay frequency. Common values are *A
        /// (Annual), B (Bi-Weekly), D (Daily), M (Monthly), S (Semi-Monthly),
        /// Q (Quarterly), W (Weekly)*. &amp;lt;br  /&amp;gt;Max length: 5
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "payFrequency")]
        public string PayFrequency { get; set; }

        /// <summary>
        /// Gets or sets employee pay grade. Must match Company setup.
        /// &amp;lt;br  /&amp;gt; Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "payGrade")]
        public string PayGrade { get; set; }

        /// <summary>
        /// Gets or sets pay rate notes regarding employee.&amp;lt;br
        /// /&amp;gt; Max length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "payRateNote")]
        public string PayRateNote { get; set; }

        /// <summary>
        /// Gets or sets employee pay type (rate code). Valid values are
        /// *Hourly* or *Salary*. &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "payType")]
        public string PayType { get; set; }

        /// <summary>
        /// Gets or sets employee base rate frequency used with payType Hourly.
        /// Common values are *Hour, Week*. Default is Hour. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ratePer")]
        public string RatePer { get; set; }

        /// <summary>
        /// Gets or sets employee gross salary per pay period used with payType
        /// Salary.&amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "salary")]
        public double? Salary { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update primary state tax code, amount type (taxCalculationCode),
    /// amount or percentage, filing status, exemptions, and supplemental check
    /// (specialCheckCalc) information. Only one primary state is allowed.
    /// Sending an updated primary state will replace the current primary
    /// state.
    /// </summary>
    public partial class EmployeePrimaryStateTax
    {
        /// <summary>
        /// Initializes a new instance of the EmployeePrimaryStateTax class.
        /// </summary>
        public EmployeePrimaryStateTax()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeePrimaryStateTax class.
        /// </summary>
        /// <param name="amount">State tax code.&lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="deductionsAmount">Box 4(b) on form W4 (year 2020 or
        /// later): Deductions amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="dependentsAmount">Box 3 on form W4 (year 2020 or
        /// later): Total dependents amount. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="exemptions">State tax exemptions value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="exemptions2">State tax exemptions 2 value.&lt;br
        /// /&gt;Decimal (12,2)</param>
        /// <param name="filingStatus">Employee state tax filing status. Common
        /// values are *S* (Single), *M* (Married).&lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="higherRate">Box 2(c) on form W4 (year 2020 or later):
        /// Multiple Jobs or Spouse Works. &lt;br  /&gt;Boolean</param>
        /// <param name="otherIncomeAmount">Box 4(a) on form W4 (year 2020 or
        /// later): Other income amount. &lt;br  /&gt;Decimal (12,2)</param>
        /// <param name="percentage">State Tax percentage. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="specialCheckCalc">Supplemental check calculation code.
        /// Common values are *Blocked* (Taxes blocked on Supplemental checks),
        /// *Supp* (Use supplemental Tax Rate-Code). &lt;br  /&gt;Max length:
        /// 10</param>
        /// <param name="taxCalculationCode">Tax calculation code. Common
        /// values are *F* (Flat), *P* (Percentage), *FDFP* (Flat Dollar Amount
        /// plus Fixed Percentage). &lt;br  /&gt;Max length: 10</param>
        /// <param name="taxCode">State tax code.&lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="w4FormYear">The state W4 form year &lt;br
        /// /&gt;Integer</param>
        public EmployeePrimaryStateTax(double? amount = default(double?), double? deductionsAmount = default(double?), double? dependentsAmount = default(double?), double? exemptions = default(double?), double? exemptions2 = default(double?), string filingStatus = default(string), bool? higherRate = default(bool?), double? otherIncomeAmount = default(double?), double? percentage = default(double?), string specialCheckCalc = default(string), string taxCalculationCode = default(string), string taxCode = default(string), int? w4FormYear = default(int?))
        {
            this.Amount = amount;
            this.DeductionsAmount = deductionsAmount;
            this.DependentsAmount = dependentsAmount;
            this.Exemptions = exemptions;
            this.Exemptions2 = exemptions2;
            this.FilingStatus = filingStatus;
            this.HigherRate = higherRate;
            this.OtherIncomeAmount = otherIncomeAmount;
            this.Percentage = percentage;
            this.SpecialCheckCalc = specialCheckCalc;
            this.TaxCalculationCode = taxCalculationCode;
            this.TaxCode = taxCode;
            this.W4FormYear = w4FormYear;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets state tax code.&amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "amount")]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or sets box 4(b) on form W4 (year 2020 or later): Deductions
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deductionsAmount")]
        public double? DeductionsAmount { get; set; }

        /// <summary>
        /// Gets or sets box 3 on form W4 (year 2020 or later): Total
        /// dependents amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dependentsAmount")]
        public double? DependentsAmount { get; set; }

        /// <summary>
        /// Gets or sets state tax exemptions value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions")]
        public double? Exemptions { get; set; }

        /// <summary>
        /// Gets or sets state tax exemptions 2 value.&amp;lt;br
        /// /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptions2")]
        public double? Exemptions2 { get; set; }

        /// <summary>
        /// Gets or sets employee state tax filing status. Common values are
        /// *S* (Single), *M* (Married).&amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filingStatus")]
        public string FilingStatus { get; set; }

        /// <summary>
        /// Gets or sets box 2(c) on form W4 (year 2020 or later): Multiple
        /// Jobs or Spouse Works. &amp;lt;br  /&amp;gt;Boolean
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "higherRate")]
        public bool? HigherRate { get; set; }

        /// <summary>
        /// Gets or sets box 4(a) on form W4 (year 2020 or later): Other income
        /// amount. &amp;lt;br  /&amp;gt;Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "otherIncomeAmount")]
        public double? OtherIncomeAmount { get; set; }

        /// <summary>
        /// Gets or sets state Tax percentage. &amp;lt;br  /&amp;gt;Decimal
        /// (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentage")]
        public double? Percentage { get; set; }

        /// <summary>
        /// Gets or sets supplemental check calculation code. Common values are
        /// *Blocked* (Taxes blocked on Supplemental checks), *Supp* (Use
        /// supplemental Tax Rate-Code). &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "specialCheckCalc")]
        public string SpecialCheckCalc { get; set; }

        /// <summary>
        /// Gets or sets tax calculation code. Common values are *F* (Flat),
        /// *P* (Percentage), *FDFP* (Flat Dollar Amount plus Fixed
        /// Percentage). &amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCalculationCode")]
        public string TaxCalculationCode { get; set; }

        /// <summary>
        /// Gets or sets state tax code.&amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxCode")]
        public string TaxCode { get; set; }

        /// <summary>
        /// Gets or sets the state W4 form year &amp;lt;br  /&amp;gt;Integer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "w4FormYear")]
        public int? W4FormYear { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update employee status, change reason, effective date, and
    /// adjusted seniority date. Note that companies that are still in
    /// Implementation cannot hire future employees.
    /// </summary>
    public partial class EmployeeStatus
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeStatus class.
        /// </summary>
        public EmployeeStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeStatus class.
        /// </summary>
        /// <param name="adjustedSeniorityDate">Adjusted seniority date. Common
        /// formats include *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="changeReason">Employee status change reason. Must
        /// match Company setup.&lt;br  /&gt; Max length: 15</param>
        /// <param name="effectiveDate">Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="employeeStatusProperty">Employee current work status.
        /// Common values are *A* (Active), *L* (Leave of Absence), *T*
        /// (Terminated). &lt;br  /&gt;Max length: 20</param>
        /// <param name="hireDate">Employee hired date. Updates to hire date
        /// are not allowed and will be ignored. Common formats include
        /// *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="isEligibleForRehire">Indicates if employee eligible
        /// for rehire.</param>
        /// <param name="reHireDate">Rehire date if employee is rehired.
        /// Updates to re-hire date are not allowed and will be ignored. Common
        /// formats are *MM-DD-CCYY, CCYY-MM-DD*.</param>
        public EmployeeStatus(string adjustedSeniorityDate = default(string), string changeReason = default(string), string effectiveDate = default(string), string employeeStatusProperty = default(string), string hireDate = default(string), bool? isEligibleForRehire = default(bool?), string reHireDate = default(string))
        {
            this.AdjustedSeniorityDate = adjustedSeniorityDate;
            this.ChangeReason = changeReason;
            this.EffectiveDate = effectiveDate;
            this.EmployeeStatusProperty = employeeStatusProperty;
            this.HireDate = hireDate;
            this.IsEligibleForRehire = isEligibleForRehire;
            this.ReHireDate = reHireDate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets adjusted seniority date. Common formats include
        /// *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adjustedSeniorityDate")]
        public string AdjustedSeniorityDate { get; set; }

        /// <summary>
        /// Gets or sets employee status change reason. Must match Company
        /// setup.&amp;lt;br  /&amp;gt; Max length: 15
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "changeReason")]
        public string ChangeReason { get; set; }

        /// <summary>
        /// Gets or sets common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "effectiveDate")]
        public string EffectiveDate { get; set; }

        /// <summary>
        /// Gets or sets employee current work status. Common values are *A*
        /// (Active), *L* (Leave of Absence), *T* (Terminated). &amp;lt;br
        /// /&amp;gt;Max length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "employeeStatus")]
        public string EmployeeStatusProperty { get; set; }

        /// <summary>
        /// Gets or sets employee hired date. Updates to hire date are not
        /// allowed and will be ignored. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hireDate")]
        public string HireDate { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee eligible for rehire.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEligibleForRehire")]
        public bool? IsEligibleForRehire { get; set; }

        /// <summary>
        /// Gets or sets rehire date if employee is rehired.  Updates to
        /// re-hire date are not allowed and will be ignored. Common formats
        /// are *MM-DD-CCYY, CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reHireDate")]
        public string ReHireDate { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add tax form, 1099 exempt reasons and notes, and 943 agricultural
    /// employee information. Once the employee receives wages, this
    /// information cannot be updated. Add or update SUI tax state, retirement
    /// plan, and statutory information.
    /// </summary>
    public partial class EmployeeTaxSetup
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeTaxSetup class.
        /// </summary>
        public EmployeeTaxSetup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeTaxSetup class.
        /// </summary>
        /// <param name="fitwExemptNotes">Notes for FITW exemption.&lt;br
        /// /&gt; Max length: 250</param>
        /// <param name="fitwExemptReason">Reason code for FITW exemption.
        /// Common values are *SE* (Statutory employee), *CR*
        /// (clergy/Religious). &lt;br  /&gt; Max length: 30</param>
        /// <param name="futaExemptNotes">Notes for FUTA exemption.&lt;br
        /// /&gt; Max length: 250</param>
        /// <param name="futaExemptReason">Reason code for FUTA exemption.
        /// Common values are *501* (5019c)(3) Organization), *IC* (Independent
        /// Contractor).&lt;br  /&gt; Max length: 30</param>
        /// <param name="isEmployee943">Indicates if employee in agriculture or
        /// farming.</param>
        /// <param name="isPension">Indicates if employee is eligible for
        /// pension.</param>
        /// <param name="isStatutory">Indicates if employee is
        /// statutory.</param>
        /// <param name="medExemptNotes">Notes for Medicare exemption.&lt;br
        /// /&gt; Max length: 250</param>
        /// <param name="medExemptReason">Reason code for Medicare exemption.
        /// Common values are *501* (5019c)(3) Organization), *IC* (Independent
        /// Contractor).&lt;br  /&gt; Max length: 30</param>
        /// <param name="sitwExemptNotes">Notes for SITW exemption.&lt;br
        /// /&gt; Max length: 250</param>
        /// <param name="sitwExemptReason">Reason code for SITW exemption.
        /// Common values are *SE* (Statutory employee), *CR*
        /// (clergy/Religious). &lt;br  /&gt; Max length: 30</param>
        /// <param name="ssExemptNotes">Notes for Social Security
        /// exemption.&lt;br  /&gt; Max length: 250</param>
        /// <param name="ssExemptReason">Reason code for Social Security
        /// exemption. Common values are *SE* (Statutory employee), *CR*
        /// (clergy/Religious). &lt;br  /&gt; Max length: 30</param>
        /// <param name="suiExemptNotes">Notes for SUI exemption.&lt;br  /&gt;
        /// Max length: 250</param>
        /// <param name="suiExemptReason">Reason code for SUI exemption. Common
        /// values are *SE* (Statutory employee), *CR* (clergy/Religious).
        /// &lt;br  /&gt; Max length: 30</param>
        /// <param name="suiState">Employee SUI (State Unemployment Insurance)
        /// state. &lt;br  /&gt;Max length: 2</param>
        /// <param name="taxDistributionCode1099R">Employee 1099R distribution
        /// code. Common values are *7* (Normal Distribution), *F* (Charitable
        /// Gift Annuity). &lt;br  /&gt;Max length: 1</param>
        /// <param name="taxForm">Employee tax form for reporting income. Valid
        /// values are *W2, 1099M, 1099R*. Default is W2. &lt;br  /&gt;Max
        /// length: 15</param>
        public EmployeeTaxSetup(string fitwExemptNotes = default(string), string fitwExemptReason = default(string), string futaExemptNotes = default(string), string futaExemptReason = default(string), bool? isEmployee943 = default(bool?), bool? isPension = default(bool?), bool? isStatutory = default(bool?), string medExemptNotes = default(string), string medExemptReason = default(string), string sitwExemptNotes = default(string), string sitwExemptReason = default(string), string ssExemptNotes = default(string), string ssExemptReason = default(string), string suiExemptNotes = default(string), string suiExemptReason = default(string), string suiState = default(string), string taxDistributionCode1099R = default(string), string taxForm = default(string))
        {
            this.FitwExemptNotes = fitwExemptNotes;
            this.FitwExemptReason = fitwExemptReason;
            this.FutaExemptNotes = futaExemptNotes;
            this.FutaExemptReason = futaExemptReason;
            this.IsEmployee943 = isEmployee943;
            this.IsPension = isPension;
            this.IsStatutory = isStatutory;
            this.MedExemptNotes = medExemptNotes;
            this.MedExemptReason = medExemptReason;
            this.SitwExemptNotes = sitwExemptNotes;
            this.SitwExemptReason = sitwExemptReason;
            this.SsExemptNotes = ssExemptNotes;
            this.SsExemptReason = ssExemptReason;
            this.SuiExemptNotes = suiExemptNotes;
            this.SuiExemptReason = suiExemptReason;
            this.SuiState = suiState;
            this.TaxDistributionCode1099R = taxDistributionCode1099R;
            this.TaxForm = taxForm;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets notes for FITW exemption.&amp;lt;br  /&amp;gt; Max
        /// length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fitwExemptNotes")]
        public string FitwExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for FITW exemption. Common values are *SE*
        /// (Statutory employee), *CR* (clergy/Religious). &amp;lt;br
        /// /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fitwExemptReason")]
        public string FitwExemptReason { get; set; }

        /// <summary>
        /// Gets or sets notes for FUTA exemption.&amp;lt;br  /&amp;gt; Max
        /// length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "futaExemptNotes")]
        public string FutaExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for FUTA exemption. Common values are
        /// *501* (5019c)(3) Organization), *IC* (Independent
        /// Contractor).&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "futaExemptReason")]
        public string FutaExemptReason { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee in agriculture or farming.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEmployee943")]
        public bool? IsEmployee943 { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is eligible for pension.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isPension")]
        public bool? IsPension { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is statutory.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isStatutory")]
        public bool? IsStatutory { get; set; }

        /// <summary>
        /// Gets or sets notes for Medicare exemption.&amp;lt;br  /&amp;gt; Max
        /// length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "medExemptNotes")]
        public string MedExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for Medicare exemption. Common values are
        /// *501* (5019c)(3) Organization), *IC* (Independent
        /// Contractor).&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "medExemptReason")]
        public string MedExemptReason { get; set; }

        /// <summary>
        /// Gets or sets notes for SITW exemption.&amp;lt;br  /&amp;gt; Max
        /// length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sitwExemptNotes")]
        public string SitwExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for SITW exemption. Common values are *SE*
        /// (Statutory employee), *CR* (clergy/Religious). &amp;lt;br
        /// /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sitwExemptReason")]
        public string SitwExemptReason { get; set; }

        /// <summary>
        /// Gets or sets notes for Social Security exemption.&amp;lt;br
        /// /&amp;gt; Max length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ssExemptNotes")]
        public string SsExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for Social Security exemption. Common
        /// values are *SE* (Statutory employee), *CR* (clergy/Religious).
        /// &amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ssExemptReason")]
        public string SsExemptReason { get; set; }

        /// <summary>
        /// Gets or sets notes for SUI exemption.&amp;lt;br  /&amp;gt; Max
        /// length: 250
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suiExemptNotes")]
        public string SuiExemptNotes { get; set; }

        /// <summary>
        /// Gets or sets reason code for SUI exemption. Common values are *SE*
        /// (Statutory employee), *CR* (clergy/Religious). &amp;lt;br
        /// /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suiExemptReason")]
        public string SuiExemptReason { get; set; }

        /// <summary>
        /// Gets or sets employee SUI (State Unemployment Insurance) state.
        /// &amp;lt;br  /&amp;gt;Max length: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suiState")]
        public string SuiState { get; set; }

        /// <summary>
        /// Gets or sets employee 1099R distribution code. Common values are
        /// *7* (Normal Distribution), *F* (Charitable Gift Annuity).
        /// &amp;lt;br  /&amp;gt;Max length: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxDistributionCode1099R")]
        public string TaxDistributionCode1099R { get; set; }

        /// <summary>
        /// Gets or sets employee tax form for reporting income. Valid values
        /// are *W2, 1099M, 1099R*. Default is W2. &amp;lt;br  /&amp;gt;Max
        /// length: 15
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxForm")]
        public string TaxForm { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update Web Time badge number and charge rate and synchronize Web
    /// Pay and Web Time employee data.
    /// </summary>
    public partial class EmployeeWebTime
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeWebTime class.
        /// </summary>
        public EmployeeWebTime()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeWebTime class.
        /// </summary>
        /// <param name="badgeNumber">Badge number usually issued for time and
        /// attendance system use. &lt;br  /&gt;Max length: 50</param>
        /// <param name="chargeRate">Rate to be charged to third party for time
        /// worked by the employee. It is most commonly referenced in the Cost
        /// Center Charge, Cost Center Charge vs. Cost Reports, and the
        /// Customer Invoice time and attendance reports. &lt;br  /&gt;Decimal
        /// (12,2)</param>
        /// <param name="isTimeLaborEnabled">If set to true, changes to
        /// employee data will be reflected in Web Time.</param>
        public EmployeeWebTime(string badgeNumber = default(string), double? chargeRate = default(double?), bool? isTimeLaborEnabled = default(bool?))
        {
            this.BadgeNumber = badgeNumber;
            this.ChargeRate = chargeRate;
            this.IsTimeLaborEnabled = isTimeLaborEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets badge number usually issued for time and attendance
        /// system use. &amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "badgeNumber")]
        public string BadgeNumber { get; set; }

        /// <summary>
        /// Gets or sets rate to be charged to third party for time worked by
        /// the employee. It is most commonly referenced in the Cost Center
        /// Charge, Cost Center Charge vs. Cost Reports, and the Customer
        /// Invoice time and attendance reports. &amp;lt;br  /&amp;gt;Decimal
        /// (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "chargeRate")]
        public double? ChargeRate { get; set; }

        /// <summary>
        /// Gets or sets if set to true, changes to employee data will be
        /// reflected in Web Time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTimeLaborEnabled")]
        public bool? IsTimeLaborEnabled { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update employee's work address, phone numbers, and email. Work
    /// Location drop down field is not included.
    /// </summary>
    public partial class EmployeeWorkAddress
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeWorkAddress class.
        /// </summary>
        public EmployeeWorkAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeWorkAddress class.
        /// </summary>
        /// <param name="address1">1st address line.&lt;br  /&gt; Max length:
        /// 40</param>
        /// <param name="address2">2nd address line. &lt;br  /&gt; Max length:
        /// 40</param>
        /// <param name="city">City.&lt;br  /&gt; Max length: 40</param>
        /// <param name="country">Country.&lt;br  /&gt; Max length: 30</param>
        /// <param name="county">County.&lt;br  /&gt; Max length: 30</param>
        /// <param name="emailAddress">Email. &lt;br  /&gt;Max length:
        /// 50</param>
        /// <param name="location">Work Location name. &lt;br /&gt;Max length:
        /// 50</param>
        /// <param name="mailStop">Employee mail stop.&lt;br  /&gt; Max length:
        /// 10</param>
        /// <param name="mobilePhone">Mobile phone number.&lt;br  /&gt; Max
        /// length: 12</param>
        /// <param name="pager">Employee pager number.&lt;br  /&gt; Max length:
        /// 20</param>
        /// <param name="phone">Phone number.&lt;br  /&gt; Max length:
        /// 12</param>
        /// <param name="phoneExtension">Phone number extension.&lt;br  /&gt;
        /// Max length: 10</param>
        /// <param name="postalCode">Postal code.&lt;br  /&gt; Max length:
        /// 10</param>
        /// <param name="state">State or province.&lt;br  /&gt; Max length:
        /// 2</param>
        public EmployeeWorkAddress(string address1 = default(string), string address2 = default(string), string city = default(string), string country = default(string), string county = default(string), string emailAddress = default(string), string location = default(string), string mailStop = default(string), string mobilePhone = default(string), string pager = default(string), string phone = default(string), string phoneExtension = default(string), string postalCode = default(string), string state = default(string))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.City = city;
            this.Country = country;
            this.County = county;
            this.EmailAddress = emailAddress;
            this.Location = location;
            this.MailStop = mailStop;
            this.MobilePhone = mobilePhone;
            this.Pager = pager;
            this.Phone = phone;
            this.PhoneExtension = phoneExtension;
            this.PostalCode = postalCode;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets 1st address line.&amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address1")]
        public string Address1 { get; set; }

        /// <summary>
        /// Gets or sets 2nd address line. &amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address2")]
        public string Address2 { get; set; }

        /// <summary>
        /// Gets or sets city.&amp;lt;br  /&amp;gt; Max length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "city")]
        public string City { get; set; }

        /// <summary>
        /// Gets or sets country.&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "country")]
        public string Country { get; set; }

        /// <summary>
        /// Gets or sets county.&amp;lt;br  /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "county")]
        public string County { get; set; }

        /// <summary>
        /// Gets or sets email. &amp;lt;br  /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "emailAddress")]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or sets work Location name. &amp;lt;br /&amp;gt;Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets employee mail stop.&amp;lt;br  /&amp;gt; Max length:
        /// 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mailStop")]
        public string MailStop { get; set; }

        /// <summary>
        /// Gets or sets mobile phone number.&amp;lt;br  /&amp;gt; Max length:
        /// 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mobilePhone")]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Gets or sets employee pager number.&amp;lt;br  /&amp;gt; Max
        /// length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pager")]
        public string Pager { get; set; }

        /// <summary>
        /// Gets or sets phone number.&amp;lt;br  /&amp;gt; Max length: 12
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or sets phone number extension.&amp;lt;br  /&amp;gt; Max
        /// length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "phoneExtension")]
        public string PhoneExtension { get; set; }

        /// <summary>
        /// Gets or sets postal code.&amp;lt;br  /&amp;gt; Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or sets state or province.&amp;lt;br  /&amp;gt; Max length: 2
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// Add or update I-9 work authorization information.
    /// </summary>
    public partial class EmployeeWorkEligibility
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeWorkEligibility class.
        /// </summary>
        public EmployeeWorkEligibility()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeWorkEligibility class.
        /// </summary>
        /// <param name="alienOrAdmissionDocumentNumber">Employee USCIS or
        /// Admission Number. &lt;br  /&gt; Must be 7-10 characters and may
        /// begin with an 'A'</param>
        /// <param name="attestedDate">The date the I-9 Verification form was
        /// attested by Employer or Authorized representative. Common formats
        /// are *MM-DD-CCYY, CCYY-MM-DD*.</param>
        /// <param name="countryOfIssuance">If Foreign Passport number is
        /// provided, provide its country of issuance. Must match Paylocity
        /// setup.&lt;br  /&gt; Max length: 30</param>
        /// <param name="foreignPassportNumber">Foreign Passport Number.&lt;br
        /// /&gt; Max length: 50</param>
        /// <param name="i94AdmissionNumber">Form I-94 admission number.&lt;br
        /// /&gt; Must be 11 numeric characters</param>
        /// <param name="i9DateVerified">Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="i9Notes">Notes regarding employee's i9.&lt;br  /&gt;
        /// Max length: 4000</param>
        /// <param name="isI9Verified">Indicates if employee I9 is
        /// verified.</param>
        /// <param name="isSsnVerified">Indicates if employee SSN is
        /// verified.</param>
        /// <param name="ssnDateVerified">The date of employer verification of
        /// employee SSN. Common formats include *MM-DD-CCYY*,
        /// *CCYY-MM-DD*.</param>
        /// <param name="ssnNotes">Notes regarding employee's SSN.&lt;br  /&gt;
        /// Max length: 4000</param>
        /// <param name="visaType">Employee Visa type. Must match one of the
        /// system coded values.&lt;br  /&gt; Max length: 100</param>
        /// <param name="workAuthorization">Employee work authorization. Must
        /// match one of the system coded values.&lt;br  /&gt; Max length:
        /// 100</param>
        /// <param name="workUntil">End date of employee work eligibility.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        public EmployeeWorkEligibility(string alienOrAdmissionDocumentNumber = default(string), string attestedDate = default(string), string countryOfIssuance = default(string), string foreignPassportNumber = default(string), string i94AdmissionNumber = default(string), string i9DateVerified = default(string), string i9Notes = default(string), bool? isI9Verified = default(bool?), bool? isSsnVerified = default(bool?), string ssnDateVerified = default(string), string ssnNotes = default(string), string visaType = default(string), string workAuthorization = default(string), string workUntil = default(string))
        {
            this.AlienOrAdmissionDocumentNumber = alienOrAdmissionDocumentNumber;
            this.AttestedDate = attestedDate;
            this.CountryOfIssuance = countryOfIssuance;
            this.ForeignPassportNumber = foreignPassportNumber;
            this.I94AdmissionNumber = i94AdmissionNumber;
            this.I9DateVerified = i9DateVerified;
            this.I9Notes = i9Notes;
            this.IsI9Verified = isI9Verified;
            this.IsSsnVerified = isSsnVerified;
            this.SsnDateVerified = ssnDateVerified;
            this.SsnNotes = ssnNotes;
            this.VisaType = visaType;
            this.WorkAuthorization = workAuthorization;
            this.WorkUntil = workUntil;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets employee USCIS or Admission Number. &amp;lt;br
        /// /&amp;gt; Must be 7-10 characters and may begin with an 'A'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alienOrAdmissionDocumentNumber")]
        public string AlienOrAdmissionDocumentNumber { get; set; }

        /// <summary>
        /// Gets or sets the date the I-9 Verification form was attested by
        /// Employer or Authorized representative. Common formats are
        /// *MM-DD-CCYY, CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "attestedDate")]
        public string AttestedDate { get; set; }

        /// <summary>
        /// Gets or sets if Foreign Passport number is provided, provide its
        /// country of issuance. Must match Paylocity setup.&amp;lt;br
        /// /&amp;gt; Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "countryOfIssuance")]
        public string CountryOfIssuance { get; set; }

        /// <summary>
        /// Gets or sets foreign Passport Number.&amp;lt;br  /&amp;gt; Max
        /// length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "foreignPassportNumber")]
        public string ForeignPassportNumber { get; set; }

        /// <summary>
        /// Gets or sets form I-94 admission number.&amp;lt;br  /&amp;gt; Must
        /// be 11 numeric characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "i94AdmissionNumber")]
        public string I94AdmissionNumber { get; set; }

        /// <summary>
        /// Gets or sets common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "i9DateVerified")]
        public string I9DateVerified { get; set; }

        /// <summary>
        /// Gets or sets notes regarding employee's i9.&amp;lt;br  /&amp;gt;
        /// Max length: 4000
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "i9Notes")]
        public string I9Notes { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee I9 is verified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isI9Verified")]
        public bool? IsI9Verified { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee SSN is verified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSsnVerified")]
        public bool? IsSsnVerified { get; set; }

        /// <summary>
        /// Gets or sets the date of employer verification of employee SSN.
        /// Common formats include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ssnDateVerified")]
        public string SsnDateVerified { get; set; }

        /// <summary>
        /// Gets or sets notes regarding employee's SSN.&amp;lt;br  /&amp;gt;
        /// Max length: 4000
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ssnNotes")]
        public string SsnNotes { get; set; }

        /// <summary>
        /// Gets or sets employee Visa type. Must match one of the system coded
        /// values.&amp;lt;br  /&amp;gt; Max length: 100
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "visaType")]
        public string VisaType { get; set; }

        /// <summary>
        /// Gets or sets employee work authorization. Must match one of the
        /// system coded values.&amp;lt;br  /&amp;gt; Max length: 100
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workAuthorization")]
        public string WorkAuthorization { get; set; }

        /// <summary>
        /// Gets or sets end date of employee work eligibility.  Common formats
        /// include *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workUntil")]
        public string WorkUntil { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The employee model
    /// </summary>
    public partial class Employee
    {
        /// <summary>
        /// Initializes a new instance of the Employee class.
        /// </summary>
        public Employee()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Employee class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="additionalDirectDeposit">Add up to 19 direct deposit
        /// accounts in addition to the main direct deposit account. IMPORTANT:
        /// A direct deposit update will remove ALL existing main and
        /// additional direct deposit information in WebPay and replace with
        /// information provided on the request. GET API will not return direct
        /// deposit data.</param>
        /// <param name="additionalRate">Add Additional Rates.</param>
        /// <param name="benefitSetup"> Add or update setup values used for
        /// employee benefits integration, insurance plan settings, and ACA
        /// reporting.</param>
        /// <param name="birthDate">Employee birthdate. Common formats include
        /// *MM-DD-CCYY*, *CCYY-MM-DD*.</param>
        /// <param name="companyName">Company name as defined in Web Pay,
        /// applicable with GET requests only.&lt;br  /&gt; Max length:
        /// 50</param>
        /// <param name="currency">Employee is paid in this currency. &lt;br
        /// /&gt;Max length: 30</param>
        /// <param name="customBooleanFields">Up to 8 custom fields of boolean
        /// (checkbox) type value.</param>
        /// <param name="customDateFields">Up to 8 custom fields of the date
        /// type value.</param>
        /// <param name="customDropDownFields">Up to 8 custom fields of the
        /// dropdown type value.</param>
        /// <param name="customNumberFields">Up to 8 custom fields of numeric
        /// type value.</param>
        /// <param name="customTextFields">Up to 8 custom fields of text type
        /// value.</param>
        /// <param name="departmentPosition">Add or update home department cost
        /// center, position, supervisor, reviewer, employment type, EEO class,
        /// pay settings, and union information.</param>
        /// <param name="disabilityDescription">Indicates if employee has
        /// disability status.</param>
        /// <param name="emergencyContacts">Add or update Emergency
        /// Contacts.</param>
        /// <param name="employeeId">Leave blank to have Web Pay automatically
        /// assign the next available employee ID.&lt;br  /&gt;Max length:
        /// 10</param>
        /// <param name="ethnicity">Employee ethnicity.&lt;br  /&gt; Max
        /// length: 10</param>
        /// <param name="federalTax">Add or update federal tax amount type
        /// (taxCalculationCode), amount or percentage, filing status, and
        /// exemptions.</param>
        /// <param name="firstName">Employee first name. &lt;br  /&gt;Max
        /// length: 40</param>
        /// <param name="gender">Employee gender. Common values *M* (Male), *F*
        /// (Female). &lt;br  /&gt;Max length: 1</param>
        /// <param name="homeAddress">Add or update employee's home address,
        /// personal phone numbers, and personal email.</param>
        /// <param name="isHighlyCompensated">Indicates if employee meets the
        /// highly compensated employee criteria.</param>
        /// <param name="isSmoker">Indicates if employee is a smoker.</param>
        /// <param name="lastName">Employee last name. &lt;br  /&gt;Max length:
        /// 40</param>
        /// <param name="localTax">Add, update, or delete local tax code,
        /// filing status, and exemptions including  PA-PSD taxes.</param>
        /// <param name="mainDirectDeposit">Add the main direct deposit
        /// account. After deposits are made to any additional direct deposit
        /// accounts, the remaining net check is deposited in the main direct
        /// deposit account. IMPORTANT: A direct deposit update will remove ALL
        /// existing main and additional direct deposit information in WebPay
        /// and replace with what is provided on the request. GET API will not
        /// return direct deposit data.</param>
        /// <param name="maritalStatus">Employee marital status. Common values
        /// *D (Divorced), M (Married), S (Single), W (Widowed)*. &lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="middleName">Employee middle name.&lt;br  /&gt; Max
        /// length: 20</param>
        /// <param name="nonPrimaryStateTax">Add or update non-primary state
        /// tax code, amount type (taxCalculationCode), amount or percentage,
        /// filing status, exemptions, supplemental check (specialCheckCalc),
        /// and reciprocity code information.</param>
        /// <param name="ownerPercent">Percentage of employee's ownership in
        /// the company, entered as a whole number. &lt;br  /&gt; Decimal
        /// (12,2)</param>
        /// <param name="preferredName">Employee preferred display name.&lt;br
        /// /&gt; Max length: 20</param>
        /// <param name="primaryPayRate">Add or update hourly or salary pay
        /// rate, effective date, and pay frequency.</param>
        /// <param name="primaryStateTax">Add or update primary state tax code,
        /// amount type (taxCalculationCode), amount or percentage, filing
        /// status, exemptions, and supplemental check (specialCheckCalc)
        /// information. Only one primary state is allowed. Sending an updated
        /// primary state will replace the current primary state.</param>
        /// <param name="priorLastName">Prior last name if applicable.&lt;br
        /// /&gt;Max length: 40</param>
        /// <param name="salutation">Employee preferred salutation. &lt;br
        /// /&gt;Max length: 10</param>
        /// <param name="ssn">Employee social security number. Leave it blank
        /// if valid social security number not available. &lt;br  /&gt;Max
        /// length: 11</param>
        /// <param name="status">Add or update employee status, change reason,
        /// effective date, and adjusted seniority date. Note that companies
        /// that are still in Implementation cannot hire future
        /// employees.</param>
        /// <param name="suffix">Employee name suffix. Common values are *Jr,
        /// Sr, II*.&lt;br  /&gt;Max length: 30</param>
        /// <param name="taxSetup">Add tax form, 1099 exempt reasons and notes,
        /// and 943 agricultural employee information. Once the employee
        /// receives wages, this information cannot be updated. Add or update
        /// SUI tax state, retirement plan, and statutory information.</param>
        /// <param name="veteranDescription">Indicates if employee is a
        /// veteran.</param>
        /// <param name="webTime">Add or update Web Time badge number and
        /// charge rate and synchronize Web Pay and Web Time employee
        /// data.</param>
        /// <param name="workAddress">Add or update employee's work address,
        /// phone numbers, and email. Work Location drop down field is not
        /// included.</param>
        /// <param name="workEligibility">Add or update I-9 work authorization
        /// information.</param>
        public Employee(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), System.Collections.Generic.IList<EmployeeAdditionalDirectDepositItem> additionalDirectDeposit = default(System.Collections.Generic.IList<EmployeeAdditionalDirectDepositItem>), System.Collections.Generic.IList<EmployeeAdditionalRateItem> additionalRate = default(System.Collections.Generic.IList<EmployeeAdditionalRateItem>), EmployeeBenefitSetup benefitSetup = default(EmployeeBenefitSetup), string birthDate = default(string), string companyName = default(string), string currency = default(string), System.Collections.Generic.IList<EmployeeCustomBooleanFieldsItem> customBooleanFields = default(System.Collections.Generic.IList<EmployeeCustomBooleanFieldsItem>), System.Collections.Generic.IList<EmployeeCustomDateFieldsItem> customDateFields = default(System.Collections.Generic.IList<EmployeeCustomDateFieldsItem>), System.Collections.Generic.IList<EmployeeCustomDropDownFieldsItem> customDropDownFields = default(System.Collections.Generic.IList<EmployeeCustomDropDownFieldsItem>), System.Collections.Generic.IList<EmployeeCustomNumberFieldsItem> customNumberFields = default(System.Collections.Generic.IList<EmployeeCustomNumberFieldsItem>), System.Collections.Generic.IList<EmployeeCustomTextFieldsItem> customTextFields = default(System.Collections.Generic.IList<EmployeeCustomTextFieldsItem>), EmployeeDepartmentPosition departmentPosition = default(EmployeeDepartmentPosition), string disabilityDescription = default(string), System.Collections.Generic.IList<EmployeeEmergencyContactsItem> emergencyContacts = default(System.Collections.Generic.IList<EmployeeEmergencyContactsItem>), string employeeId = default(string), string ethnicity = default(string), EmployeeFederalTax federalTax = default(EmployeeFederalTax), string firstName = default(string), string gender = default(string), EmployeeHomeAddress homeAddress = default(EmployeeHomeAddress), bool? isHighlyCompensated = default(bool?), bool? isSmoker = default(bool?), string lastName = default(string), System.Collections.Generic.IList<EmployeeLocalTaxItem> localTax = default(System.Collections.Generic.IList<EmployeeLocalTaxItem>), EmployeeMainDirectDeposit mainDirectDeposit = default(EmployeeMainDirectDeposit), string maritalStatus = default(string), string middleName = default(string), EmployeeNonPrimaryStateTax nonPrimaryStateTax = default(EmployeeNonPrimaryStateTax), double? ownerPercent = default(double?), string preferredName = default(string), EmployeePrimaryPayRate primaryPayRate = default(EmployeePrimaryPayRate), EmployeePrimaryStateTax primaryStateTax = default(EmployeePrimaryStateTax), string priorLastName = default(string), string salutation = default(string), string ssn = default(string), EmployeeStatus status = default(EmployeeStatus), string suffix = default(string), EmployeeTaxSetup taxSetup = default(EmployeeTaxSetup), string veteranDescription = default(string), EmployeeWebTime webTime = default(EmployeeWebTime), EmployeeWorkAddress workAddress = default(EmployeeWorkAddress), EmployeeWorkEligibility workEligibility = default(EmployeeWorkEligibility))
        {
            this.AdditionalProperties = additionalProperties;
            this.AdditionalDirectDeposit = additionalDirectDeposit;
            this.AdditionalRate = additionalRate;
            this.BenefitSetup = benefitSetup;
            this.BirthDate = birthDate;
            this.CompanyName = companyName;
            this.Currency = currency;
            this.CustomBooleanFields = customBooleanFields;
            this.CustomDateFields = customDateFields;
            this.CustomDropDownFields = customDropDownFields;
            this.CustomNumberFields = customNumberFields;
            this.CustomTextFields = customTextFields;
            this.DepartmentPosition = departmentPosition;
            this.DisabilityDescription = disabilityDescription;
            this.EmergencyContacts = emergencyContacts;
            this.EmployeeId = employeeId;
            this.Ethnicity = ethnicity;
            this.FederalTax = federalTax;
            this.FirstName = firstName;
            this.Gender = gender;
            this.HomeAddress = homeAddress;
            this.IsHighlyCompensated = isHighlyCompensated;
            this.IsSmoker = isSmoker;
            this.LastName = lastName;
            this.LocalTax = localTax;
            this.MainDirectDeposit = mainDirectDeposit;
            this.MaritalStatus = maritalStatus;
            this.MiddleName = middleName;
            this.NonPrimaryStateTax = nonPrimaryStateTax;
            this.OwnerPercent = ownerPercent;
            this.PreferredName = preferredName;
            this.PrimaryPayRate = primaryPayRate;
            this.PrimaryStateTax = primaryStateTax;
            this.PriorLastName = priorLastName;
            this.Salutation = salutation;
            this.Ssn = ssn;
            this.Status = status;
            this.Suffix = suffix;
            this.TaxSetup = taxSetup;
            this.VeteranDescription = veteranDescription;
            this.WebTime = webTime;
            this.WorkAddress = workAddress;
            this.WorkEligibility = workEligibility;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets add up to 19 direct deposit accounts in addition to
        /// the main direct deposit account. IMPORTANT: A direct deposit update
        /// will remove ALL existing main and additional direct deposit
        /// information in WebPay and replace with information provided on the
        /// request. GET API will not return direct deposit data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalDirectDeposit")]
        public System.Collections.Generic.IList<EmployeeAdditionalDirectDepositItem> AdditionalDirectDeposit { get; set; }

        /// <summary>
        /// Gets or sets add Additional Rates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalRate")]
        public System.Collections.Generic.IList<EmployeeAdditionalRateItem> AdditionalRate { get; set; }

        /// <summary>
        /// Gets or sets  Add or update setup values used for employee benefits
        /// integration, insurance plan settings, and ACA reporting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "benefitSetup")]
        public EmployeeBenefitSetup BenefitSetup { get; set; }

        /// <summary>
        /// Gets or sets employee birthdate. Common formats include
        /// *MM-DD-CCYY*, *CCYY-MM-DD*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "birthDate")]
        public string BirthDate { get; set; }

        /// <summary>
        /// Gets or sets company name as defined in Web Pay, applicable with
        /// GET requests only.&amp;lt;br  /&amp;gt; Max length: 50
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "companyName")]
        public string CompanyName { get; set; }

        /// <summary>
        /// Gets or sets employee is paid in this currency. &amp;lt;br
        /// /&amp;gt;Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or sets up to 8 custom fields of boolean (checkbox) type
        /// value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBooleanFields")]
        public System.Collections.Generic.IList<EmployeeCustomBooleanFieldsItem> CustomBooleanFields { get; set; }

        /// <summary>
        /// Gets or sets up to 8 custom fields of the date type value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customDateFields")]
        public System.Collections.Generic.IList<EmployeeCustomDateFieldsItem> CustomDateFields { get; set; }

        /// <summary>
        /// Gets or sets up to 8 custom fields of the dropdown type value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customDropDownFields")]
        public System.Collections.Generic.IList<EmployeeCustomDropDownFieldsItem> CustomDropDownFields { get; set; }

        /// <summary>
        /// Gets or sets up to 8 custom fields of numeric type value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customNumberFields")]
        public System.Collections.Generic.IList<EmployeeCustomNumberFieldsItem> CustomNumberFields { get; set; }

        /// <summary>
        /// Gets or sets up to 8 custom fields of text type value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customTextFields")]
        public System.Collections.Generic.IList<EmployeeCustomTextFieldsItem> CustomTextFields { get; set; }

        /// <summary>
        /// Gets or sets add or update home department cost center, position,
        /// supervisor, reviewer, employment type, EEO class, pay settings, and
        /// union information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "departmentPosition")]
        public EmployeeDepartmentPosition DepartmentPosition { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee has disability status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disabilityDescription")]
        public string DisabilityDescription { get; set; }

        /// <summary>
        /// Gets or sets add or update Emergency Contacts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "emergencyContacts")]
        public System.Collections.Generic.IList<EmployeeEmergencyContactsItem> EmergencyContacts { get; set; }

        /// <summary>
        /// Gets or sets leave blank to have Web Pay automatically assign the
        /// next available employee ID.&amp;lt;br  /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Gets or sets employee ethnicity.&amp;lt;br  /&amp;gt; Max length:
        /// 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ethnicity")]
        public string Ethnicity { get; set; }

        /// <summary>
        /// Gets or sets add or update federal tax amount type
        /// (taxCalculationCode), amount or percentage, filing status, and
        /// exemptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "federalTax")]
        public EmployeeFederalTax FederalTax { get; set; }

        /// <summary>
        /// Gets or sets employee first name. &amp;lt;br  /&amp;gt;Max length:
        /// 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or sets employee gender. Common values *M* (Male), *F*
        /// (Female). &amp;lt;br  /&amp;gt;Max length: 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gender")]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or sets add or update employee's home address, personal phone
        /// numbers, and personal email.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "homeAddress")]
        public EmployeeHomeAddress HomeAddress { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee meets the highly compensated
        /// employee criteria.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isHighlyCompensated")]
        public bool? IsHighlyCompensated { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is a smoker.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isSmoker")]
        public bool? IsSmoker { get; set; }

        /// <summary>
        /// Gets or sets employee last name. &amp;lt;br  /&amp;gt;Max length:
        /// 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or sets add, update, or delete local tax code, filing status,
        /// and exemptions including  PA-PSD taxes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localTax")]
        public System.Collections.Generic.IList<EmployeeLocalTaxItem> LocalTax { get; set; }

        /// <summary>
        /// Gets or sets add the main direct deposit account. After deposits
        /// are made to any additional direct deposit accounts, the remaining
        /// net check is deposited in the main direct deposit account.
        /// IMPORTANT: A direct deposit update will remove ALL existing main
        /// and additional direct deposit information in WebPay and replace
        /// with what is provided on the request. GET API will not return
        /// direct deposit data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mainDirectDeposit")]
        public EmployeeMainDirectDeposit MainDirectDeposit { get; set; }

        /// <summary>
        /// Gets or sets employee marital status. Common values *D (Divorced),
        /// M (Married), S (Single), W (Widowed)*. &amp;lt;br  /&amp;gt;Max
        /// length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maritalStatus")]
        public string MaritalStatus { get; set; }

        /// <summary>
        /// Gets or sets employee middle name.&amp;lt;br  /&amp;gt; Max length:
        /// 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "middleName")]
        public string MiddleName { get; set; }

        /// <summary>
        /// Gets or sets add or update non-primary state tax code, amount type
        /// (taxCalculationCode), amount or percentage, filing status,
        /// exemptions, supplemental check (specialCheckCalc), and reciprocity
        /// code information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nonPrimaryStateTax")]
        public EmployeeNonPrimaryStateTax NonPrimaryStateTax { get; set; }

        /// <summary>
        /// Gets or sets percentage of employee's ownership in the company,
        /// entered as a whole number. &amp;lt;br  /&amp;gt; Decimal (12,2)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ownerPercent")]
        public double? OwnerPercent { get; set; }

        /// <summary>
        /// Gets or sets employee preferred display name.&amp;lt;br  /&amp;gt;
        /// Max length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferredName")]
        public string PreferredName { get; set; }

        /// <summary>
        /// Gets or sets add or update hourly or salary pay rate, effective
        /// date, and pay frequency.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryPayRate")]
        public EmployeePrimaryPayRate PrimaryPayRate { get; set; }

        /// <summary>
        /// Gets or sets add or update primary state tax code, amount type
        /// (taxCalculationCode), amount or percentage, filing status,
        /// exemptions, and supplemental check (specialCheckCalc) information.
        /// Only one primary state is allowed. Sending an updated primary state
        /// will replace the current primary state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryStateTax")]
        public EmployeePrimaryStateTax PrimaryStateTax { get; set; }

        /// <summary>
        /// Gets or sets prior last name if applicable.&amp;lt;br  /&amp;gt;Max
        /// length: 40
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priorLastName")]
        public string PriorLastName { get; set; }

        /// <summary>
        /// Gets or sets employee preferred salutation. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "salutation")]
        public string Salutation { get; set; }

        /// <summary>
        /// Gets or sets employee social security number. Leave it blank if
        /// valid social security number not available. &amp;lt;br
        /// /&amp;gt;Max length: 11
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ssn")]
        public string Ssn { get; set; }

        /// <summary>
        /// Gets or sets add or update employee status, change reason,
        /// effective date, and adjusted seniority date. Note that companies
        /// that are still in Implementation cannot hire future employees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public EmployeeStatus Status { get; set; }

        /// <summary>
        /// Gets or sets employee name suffix. Common values are *Jr, Sr,
        /// II*.&amp;lt;br  /&amp;gt;Max length: 30
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suffix")]
        public string Suffix { get; set; }

        /// <summary>
        /// Gets or sets add tax form, 1099 exempt reasons and notes, and 943
        /// agricultural employee information. Once the employee receives
        /// wages, this information cannot be updated. Add or update SUI tax
        /// state, retirement plan, and statutory information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taxSetup")]
        public EmployeeTaxSetup TaxSetup { get; set; }

        /// <summary>
        /// Gets or sets indicates if employee is a veteran.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "veteranDescription")]
        public string VeteranDescription { get; set; }

        /// <summary>
        /// Gets or sets add or update Web Time badge number and charge rate
        /// and synchronize Web Pay and Web Time employee data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "webTime")]
        public EmployeeWebTime WebTime { get; set; }

        /// <summary>
        /// Gets or sets add or update employee's work address, phone numbers,
        /// and email. Work Location drop down field is not included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workAddress")]
        public EmployeeWorkAddress WorkAddress { get; set; }

        /// <summary>
        /// Gets or sets add or update I-9 work authorization information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workEligibility")]
        public EmployeeWorkEligibility WorkEligibility { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AdditionalDirectDeposit != null)
            {
                if (this.AdditionalDirectDeposit.Count > 19)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "AdditionalDirectDeposit", 19);
                }
            }
            if (this.CustomBooleanFields != null)
            {
                if (this.CustomBooleanFields.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomBooleanFields", 8);
                }
                foreach (var element in this.CustomBooleanFields)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.CustomDateFields != null)
            {
                if (this.CustomDateFields.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomDateFields", 8);
                }
                foreach (var element1 in this.CustomDateFields)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.CustomDropDownFields != null)
            {
                if (this.CustomDropDownFields.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomDropDownFields", 8);
                }
                foreach (var element2 in this.CustomDropDownFields)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
            if (this.CustomNumberFields != null)
            {
                if (this.CustomNumberFields.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomNumberFields", 8);
                }
                foreach (var element3 in this.CustomNumberFields)
                {
                    if (element3 != null)
                    {
                        element3.Validate();
                    }
                }
            }
            if (this.CustomTextFields != null)
            {
                if (this.CustomTextFields.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "CustomTextFields", 8);
                }
                foreach (var element4 in this.CustomTextFields)
                {
                    if (element4 != null)
                    {
                        element4.Validate();
                    }
                }
            }
            if (this.EmergencyContacts != null)
            {
                foreach (var element5 in this.EmergencyContacts)
                {
                    if (element5 != null)
                    {
                        element5.Validate();
                    }
                }
            }
            if (this.LocalTax != null)
            {
                if (this.LocalTax.Count > 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "LocalTax", 5);
                }
            }
        }
    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The EmployeeId Response Model
    /// </summary>
    public partial class EmployeeIdResponse
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeIdResponse class.
        /// </summary>
        public EmployeeIdResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeIdResponse class.
        /// </summary>
        /// <param name="employeeId">The EmployeeId</param>
        public EmployeeIdResponse(string employeeId = default(string))
        {
            this.EmployeeId = employeeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the EmployeeId
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

    }
}
// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace PCFL.Paylocity.SDK.Models
{
    using System.Linq;

    /// <summary>
    /// The employee info model
    /// </summary>
    public partial class EmployeeInfo
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeInfo class.
        /// </summary>
        public EmployeeInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeInfo class.
        /// </summary>
        /// <param name="additionalProperties">Unmatched properties from the
        /// message are deserialized this collection</param>
        /// <param name="employeeId">Employee Id.&lt;br  /&gt; Max length:
        /// 10</param>
        /// <param name="statusCode">Employee current work status. Common
        /// values are *A* (Active), *L* (Leave of Absence), *T* (Terminated).
        /// &lt;br  /&gt;Max length: 20</param>
        /// <param name="statusTypeCode">Employee current work status type.
        /// &lt;br  /&gt;Max length: 10</param>
        public EmployeeInfo(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string employeeId = default(string), string statusCode = default(string), string statusTypeCode = default(string))
        {
            this.AdditionalProperties = additionalProperties;
            this.EmployeeId = employeeId;
            this.StatusCode = statusCode;
            this.StatusTypeCode = statusTypeCode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unmatched properties from the message are deserialized
        /// this collection
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Gets or sets employee Id.&amp;lt;br  /&amp;gt; Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "employeeId")]
        public string EmployeeId { get; set; }

        /// <summary>
        /// Gets or sets employee current work status. Common values are *A*
        /// (Active), *L* (Leave of Absence), *T* (Terminated). &amp;lt;br
        /// /&amp;gt;Max length: 20
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusCode")]
        public string StatusCode { get; set; }

        /// <summary>
        /// Gets or sets employee current work status type. &amp;lt;br
        /// /&amp;gt;Max length: 10
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusTypeCode")]
        public string StatusTypeCode { get; set; }

    }
}
